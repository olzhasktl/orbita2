# 1 "c:/Marmalade/7.5/examples/GameTutorial/CPP/modules/soundengine/source/IwSoundParams.cpp"
# 1 "c:\\Marmalade\\7.5\\examples\\GameTutorial\\CPP\\Stage4\\build_stage4_vc12//"
# 1 "<command-line>"
# 1 "c:/Marmalade/7.5/examples/GameTutorial/CPP/Stage4/build_stage4_vc12/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "c:/Marmalade/7.5/examples/GameTutorial/CPP/modules/soundengine/source/IwSoundParams.cpp"
# 16 "c:/Marmalade/7.5/examples/GameTutorial/CPP/modules/soundengine/source/IwSoundParams.cpp"
# 1 "c:/marmalade/7.5/examples/gametutorial/cpp/modules/soundengine/h/IwSoundParams.h" 1
# 20 "c:/marmalade/7.5/examples/gametutorial/cpp/modules/soundengine/h/IwSoundParams.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 1
       
# 17 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 1
# 35 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/new" 1
# 21 "c:/marmalade/7.5/s3e/h/std/c++/new"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h" 1
# 10 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 1
# 62 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl_user_config.h" 1
# 63 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 2




# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config_compat.h" 1
# 68 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 2



# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_site_config.h" 1
# 72 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 2


# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/stlcomp.h" 1
# 54 "c:/marmalade/7.5/s3e/h/std/c++/config/stlcomp.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/stl_gcc_s3e.h" 1
# 67 "c:/marmalade/7.5/s3e/h/std/c++/config/stl_gcc_s3e.h"
     typedef char __stl_char;
# 55 "c:/marmalade/7.5/s3e/h/std/c++/config/stlcomp.h" 2
# 75 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 2
# 83 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/stl_confix.h" 1
# 84 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h" 2
# 488 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h"
namespace std { }
namespace __std_alias = std;
# 546 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config.h"
namespace _STL { }

namespace stlport = _STL;
# 11 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h" 2





# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "c:/marmalade/7.5/s3e/h/std/c++/new" 2




# 1 "c:/marmalade/7.5/s3e/h/std/c++/cstddef" 1
# 37 "c:/marmalade/7.5/s3e/h/std/c++/cstddef"
# 1 "c:/marmalade/7.5/s3e/h/ext/../std/stddef.h" 1
# 19 "c:/marmalade/7.5/s3e/h/ext/../std/stddef.h"
typedef signed int ptrdiff_t;




    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 38 "c:/marmalade/7.5/s3e/h/std/c++/cstddef" 2



namespace _STL {
using ::ptrdiff_t;
using ::size_t;
}
# 27 "c:/marmalade/7.5/s3e/h/std/c++/new" 2
# 38 "c:/marmalade/7.5/s3e/h/std/c++/new"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/new.h" 1
# 52 "c:/marmalade/7.5/s3e/h/std/c++/new.h"
inline void* operator new(size_t, void* p) { return p;};
inline void* operator new[](size_t, void* p) { return p;};
inline void operator delete(void*, void*) {};
inline void operator delete[](void*, void*) {};
# 39 "c:/marmalade/7.5/s3e/h/std/c++/new" 2



# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h" 1
# 11 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/exception" 1
# 58 "c:/marmalade/7.5/s3e/h/std/c++/exception"
# 1 "c:/marmalade/7.5/s3e/h/ext/../std/c++/exception.h" 1
# 18 "c:/marmalade/7.5/s3e/h/ext/../std/c++/exception.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/exception_gcc" 1
# 44 "c:/marmalade/7.5/s3e/h/std/c++/exception_gcc"
extern "C++" {

namespace std
{
# 56 "c:/marmalade/7.5/s3e/h/std/c++/exception_gcc"
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 104 "c:/marmalade/7.5/s3e/h/std/c++/exception_gcc"
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 119 "c:/marmalade/7.5/s3e/h/std/c++/exception_gcc"
  void __verbose_terminate_handler ();
}

}
# 19 "c:/marmalade/7.5/s3e/h/ext/../std/c++/exception.h" 2
# 59 "c:/marmalade/7.5/s3e/h/std/c++/exception" 2
# 75 "c:/marmalade/7.5/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/7.5/s3e/h/std/c++/exception"
}
# 12 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h" 2

namespace _STL {

struct nothrow_t {};


extern const nothrow_t nothrow;




class bad_alloc : public exception {
public:
  bad_alloc () throw() { }
  bad_alloc(const bad_alloc&) throw() { }
  bad_alloc& operator=(const bad_alloc&) throw() {return *this;}
  ~bad_alloc () throw() { }
  const char* what() const throw() { return "bad alloc"; }
};

}
# 50 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/new" 1
# 51 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h" 2
# 80 "c:/marmalade/7.5/s3e/h/std/c++/stl/_new.h"
namespace _STL {





inline void* __stl_new(size_t __n) { void* __y = ::operator new(__n);if (__y == 0){;}return __y; }
inline void __stl_delete(void* __p) { ::operator delete(__p); }

}
# 43 "c:/marmalade/7.5/s3e/h/std/c++/new" 2



# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 2
# 47 "c:/marmalade/7.5/s3e/h/std/c++/new" 2
# 36 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 1
# 15 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
# 1 "c:/marmalade/7.5/s3e/h/s3eTypes.h" 1
# 35 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;







typedef unsigned long long s3e_uint64_t;
typedef signed long long s3e_int64_t;






typedef unsigned long s3e_size_t;
typedef long int s3e_ssize_t;
# 74 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 96 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 123 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;


typedef int64_t int64;
typedef uint64_t uint64;




typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 234 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 252 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 264 "c:/marmalade/7.5/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/7.5/s3e/h/s3eDebug.h" 1
# 15 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
# 1 "c:/marmalade/7.5/s3e/h/s3eTypes.h" 1
# 16 "c:/marmalade/7.5/s3e/h/s3eDebug.h" 2
# 56 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
typedef enum s3eDebugProperty
{



    S3E_DEBUG_TRACE_ENABLED = 0,





    S3E_DEBUG_TRACE_TO_FILE = 1,




    S3E_DEBUG_ASSERT_ENABLED = 2,





    S3E_DEBUG_AVAILABLE = 3,




    S3E_DEBUG_FONT_SCALE = 4,




    S3E_DEBUG_FONT_WIDTH = 5,




    S3E_DEBUG_FONT_HEIGHT = 6

} s3eDebugProperty;
# 113 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" int32 s3eDebugGetInt(s3eDebugProperty property);
# 131 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugSetInt(s3eDebugProperty property, int32 value);







typedef enum s3eDebugCallback
{
# 155 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
    S3E_DEBUG_ASSERT = 0,
# 170 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
    S3E_DEBUG_ERROR = 1,

    S3E_DEBUG_CALLBACK_MAX
} s3eDebugCallback;
# 198 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugRegister(s3eDebugCallback cbid, s3eCallback fn, void* userData);
# 215 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugUnRegister(s3eDebugCallback cbid, s3eCallback fn);
# 224 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
typedef enum s3eDebugError
{
    S3E_DEBUG_ERR_NONE = 0,
    S3E_DEBUG_ERR_PARAM = 1,
    S3E_DEBUG_ERR_TOO_MANY = 2,
    S3E_DEBUG_ERR_ALREADY_REG = 3,
    S3E_DEBUG_ERR_NOT_FOUND = 4
} s3eDebugError;
# 244 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eDebugError s3eDebugGetError();
# 257 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" const char* s3eDebugGetErrorString();

typedef enum s3eErrorShowResult
{

    S3E_ERROR_SHOW_CONTINUE = 0,

    S3E_ERROR_SHOW_STOP = 1,

    S3E_ERROR_SHOW_IGNORE = 2,





    S3E_ERROR_SHOW_AGAIN = 3
} s3eErrorShowResult;




typedef enum s3eMessageType
{





    S3E_MESSAGE_CONTINUE = 0,





    S3E_MESSAGE_CONTINUE_STOP = 1,






    S3E_MESSAGE_CONTINUE_STOP_IGNORE = 2
} s3eMessageType;







extern "C" s3eBool s3eDebugIsDebuggerPresent();
# 323 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" void s3eDebugOutputString(const char* pStr);
# 335 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugErrorShow(s3eMessageType type, const char* string);






extern "C" s3eErrorShowResult s3eDebugErrorPrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 360 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugAssertShow(s3eMessageType type, const char* string);
# 373 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceLine(const char* string);






extern "C" int s3eDebugTracePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






extern "C" void s3eDebugTraceClearFile();
# 400 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceFlush();
# 425 "c:/marmalade/7.5/s3e/h/s3eDebug.h"
extern "C" void s3eDebugPrint(int x, int y, const char* string, s3eBool wrap);






extern "C" void s3eDebugPrintf(int x, int y, s3eBool wrap, const char* fmt, ...)

__attribute__((format(printf, 4, 5)))

;







extern "C" s3eBool s3eDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 17 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/7.5/s3e/h/s3eDevice.h" 1
# 57 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef enum s3eDeviceError
{
    S3E_DEVICE_ERR_NONE = 0,
    S3E_DEVICE_ERR_PARAM = 1,
    S3E_DEVICE_ERR_TOO_MANY = 2,
    S3E_DEVICE_ERR_ALREADY_REG = 3,
    S3E_DEVICE_ERR_NOT_FOUND = 4,
    S3E_DEVICE_ERR_UNAVAIL = 5,
    S3E_DEVICE_ERR_DEVICE = 6,
    S3E_DEVICE_ERR_UNSUPPORTED = 7,
    S3E_DEVICE_ERR_MEM = 8,
    S3E_DEVICE_ERR_GENERIC = 9,
    S3E_DEVICE_ERR_INVALID_DRIVE = 10,
    S3E_DEVICE_ERR_INVALID_PATH = 11
} s3eDeviceError;
# 84 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eDeviceError s3eDeviceGetError();
# 98 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetErrorString();
# 107 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef enum s3eDeviceFPUType
{
    S3E_DEVICE_FPU_NONE = 0,
    S3E_DEVICE_FPU_VFP = 1,
    S3E_DEVICE_FPU_VFPV3 = 2,
    S3E_DEVICE_FPU_NEON = 3
} s3eDeviceFPUType;






typedef enum s3eDeviceProperty
{







    S3E_DEVICE_OS = 0,





    S3E_DEVICE_CLASS = 1,
# 155 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_ID = 2,
# 175 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_PHONE_NUMBER = 3,





    S3E_DEVICE_LANGUAGE = 4,






    S3E_DEVICE_STATE = 5,
# 201 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_FREE_RAM = 6,
# 214 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_TOTAL_RAM = 7,
# 233 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_ARCHITECTURE = 8,
# 243 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_S3E_VERSION = 9,
# 254 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_BATTERY_LEVEL = 10,






    S3E_DEVICE_LEFT_SOFTKEY_IS_BACK = 11,
# 273 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER = 12,
# 282 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_OS_VERSION = 13,
# 300 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_CHIPSET = 14,
# 309 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT_CODE = 15,
# 327 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_FPU = 16,





    S3E_DEVICE_BACK_SOFTKEY_POSITION = 17,





    S3E_DEVICE_ADVANCE_SOFTKEY_POSITION = 18,
# 350 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_SDK_VERSION = 19,
# 359 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_LOCALE = 20,





    S3E_DEVICE_NAME = 21,







    S3E_DEVICE_SUPPORTS_SIGNAL_HANDLING = 22,







    S3E_DEVICE_EXIT_SIGNAL = 23,
# 401 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_PROXIMITY = 24,
# 438 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNIQUE_ID = 25,
# 461 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_IMSI = 26,
# 479 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_SILENT_MODE = 27,




    S3E_DEVICE_NUM_CPU_CORES = 28,
# 498 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_MEM_TOTAL = 29,
# 522 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_MEM_FREE = 30,





    S3E_DEVICE_TIMEZONE = 31,
# 546 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_3D_MODE = 32,
# 556 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_PROCESS_ID = 33,





    S3E_DEVICE_SUPPORTS_SUSPEND_RESUME = 34,





    S3E_DEVICE_DX_FEATURE_LEVEL = 35,




    S3E_DEVICE_TIMEZONE_STD = 36,




    S3E_DEVICE_TIMEZONE_DST = 37,
# 587 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_RUNTIME = 38,

} s3eDeviceProperty;






typedef enum s3eDeviceLicPlatID
{
    S3E_LICPLAT_ID_NONE = 0x0000,


    S3E_LICPLAT_ID_WINDOWS = 0x0001,

    S3E_LICPLAT_LINUX = 0x0002,

    S3E_LICPLAT_OSX = 0x0004,


    S3E_LICPLAT_IPHONE = 0x0008,

    S3E_LICPLAT_ANDROID = 0x0010,

    S3E_LICPLAT_QNX = 0x0020,

    S3E_LICPLAT_ROKU = 0x0040,

    S3E_LICPLAT_WP8 = 0x0080,

    S3E_LICPLAT_TIZEN = 0x0100,

    S3E_LICPLAT_WS8 = 0x0200,

    S3E_LICPLAT_LG = 0x0400,

    S3E_LICPLAT_UNSET = 0x10000000,
    S3E_LICPLAT_ALL = 0x7FFFFFFF
} s3eDeviceLicPlatID;







typedef enum s3eDeviceOSID
{
    S3E_OS_ID_NONE = 0,


    S3E_OS_ID_LG = 1,

    S3E_OS_ID_WINDOWS = 3,

    S3E_OS_ID_LINUX = 5,

    S3E_OS_ID_ARM_SEMIH = 8,

    S3E_OS_ID_OSX = 13,

    S3E_OS_ID_IPHONE = 14,

    S3E_OS_ID_ANDROID = 19,

    S3E_OS_ID_QNX = 24,

    S3E_OS_ID_ROKU = 25,

    S3E_OS_ID_WP8 = 26,

    S3E_OS_ID_TIZEN = 27,

    S3E_OS_ID_WS8 = 28,

    S3E_OS_ID_WS81 = 29,

    S3E_OS_ID_WP81 = 30,

    S3E_OS_ID_LAST = 31,







    S3E_OS_ID_BREW = 2,

    S3E_OS_ID_WINMOBILE = 4,

    S3E_OS_ID_WIPI = 6,

    S3E_OS_ID_NDS = 7,

    S3E_OS_ID_NUCLEUS = 9,

    S3E_OS_ID_NGI = 10,

    S3E_OS_ID_WINCE = 11,

    S3E_OS_ID_SHARPEMP = 12,

    S3E_OS_ID_UIQ = 15,

    S3E_OS_ID_PS3 = 16,

    S3E_OS_ID_X360 = 17,

    S3E_OS_ID_WEBOS = 20,

    S3E_OS_ID_PSP = 21,

    S3E_OS_ID_WII = 22,

    S3E_OS_ID_MEEGO = 23,

} s3eDeviceOSID;







typedef enum s3eDeviceClassID
{
    S3E_DEVICE_CLASS_UNKNOWN = 0,

    S3E_DEVICE_CLASS_WINDOWS_GENERIC = 3000,
    S3E_DEVICE_CLASS_WINDOWS_PHONE = 3010,
    S3E_DEVICE_CLASS_WINDOWS_STORE = 3020,
    S3E_DEVICE_CLASS_LINUX_GENERIC = 5000,
    S3E_DEVICE_CLASS_LINUX_DESKTOP = 5001,
    S3E_DEVICE_CLASS_LINUX_EMBED = 5002,
    S3E_DEVICE_CLASS_ARM_SEMIH_GENERIC = 8000,
    S3E_DEVICE_CLASS_OSX_DESKTOP = 11000,
    S3E_DEVICE_CLASS_IPHONE = 12000,
    S3E_DEVICE_CLASS_ANDROID_GENERIC = 16000,
    S3E_DEVICE_CLASS_QNX = 19000,
    S3E_DEVICE_CLASS_TIZEN_GENERIC = 20000,

    S3E_DEVICE_CLASS_SYMBIAN_GENERIC = 1000,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60 = 1001,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60_EMULATOR = 1002,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ = 1003,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ_EMULATOR = 1004,
    S3E_DEVICE_CLASS_BREW_GENERIC = 2000,
    S3E_DEVICE_CLASS_BREW_QCIF_3G = 2001,
    S3E_DEVICE_CLASS_BREW_QCIF_25G = 2002,
    S3E_DEVICE_CLASS_BREW_SQCIF_25G = 2003,
    S3E_DEVICE_CLASS_BREW_QVGA_3G = 2004,
    S3E_DEVICE_CLASS_WINCE_GENERIC = 4000,
    S3E_DEVICE_CLASS_WINMOBILE_SP = 4001,
    S3E_DEVICE_CLASS_WINMOBILE_PPC = 4002,
    S3E_DEVICE_CLASS_WIPI_GENERIC = 6000,
    S3E_DEVICE_CLASS_NDS_GENERIC = 7000,
    S3E_DEVICE_CLASS_NDS_NDSI = 7001,
    S3E_DEVICE_CLASS_NUCLEUS_GENERIC = 9000,
    S3E_DEVICE_CLASS_NGI_GENERIC = 10000,
    S3E_DEVICE_CLASS_PS3 = 13000,
    S3E_DEVICE_CLASS_X360 = 14000,
    S3E_DEVICE_CLASS_BADA_GENERIC = 15000,
    S3E_DEVICE_CLASS_PSP = 17000,
    S3E_DEVICE_CLASS_WII = 18000

} s3eDeviceClassID;






typedef enum s3eDeviceRuntimeID
{
    S3E_DEVICE_RUNTIME_UNKNOWN = 0,
    S3E_DEVICE_RUNTIME_DALVIK = 1,
    S3E_DEVICE_RUNTIME_ART = 2,

    S3E_DEVICE_RUNTIME_WINDOWS_PHONE = 3,
    S3E_DEVICE_RUNTIME_WINDOWS = 4,

} s3eDeviceRuntimeID;




typedef enum s3eDeviceLanguage
{
    S3E_DEVICE_LANGUAGE_UNKNOWN = 0,
    S3E_DEVICE_LANGUAGE_ENGLISH = 1,
    S3E_DEVICE_LANGUAGE_FRENCH = 2,
    S3E_DEVICE_LANGUAGE_GERMAN = 3,
    S3E_DEVICE_LANGUAGE_SPANISH = 4,
    S3E_DEVICE_LANGUAGE_ITALIAN = 5,
    S3E_DEVICE_LANGUAGE_PORTUGUESE = 6,
    S3E_DEVICE_LANGUAGE_DUTCH = 7,
    S3E_DEVICE_LANGUAGE_TURKISH = 8,
    S3E_DEVICE_LANGUAGE_CROATIAN = 9,
    S3E_DEVICE_LANGUAGE_CZECH = 10,
    S3E_DEVICE_LANGUAGE_DANISH = 11,
    S3E_DEVICE_LANGUAGE_FINNISH = 12,
    S3E_DEVICE_LANGUAGE_HUNGARIAN = 13,
    S3E_DEVICE_LANGUAGE_NORWEGIAN = 14,
    S3E_DEVICE_LANGUAGE_POLISH = 15,
    S3E_DEVICE_LANGUAGE_RUSSIAN = 16,
    S3E_DEVICE_LANGUAGE_SERBIAN = 17,
    S3E_DEVICE_LANGUAGE_SLOVAK = 18,
    S3E_DEVICE_LANGUAGE_SLOVENIAN = 19,
    S3E_DEVICE_LANGUAGE_SWEDISH = 20,
    S3E_DEVICE_LANGUAGE_UKRAINIAN = 21,
    S3E_DEVICE_LANGUAGE_GREEK = 22,
    S3E_DEVICE_LANGUAGE_JAPANESE = 23,
    S3E_DEVICE_LANGUAGE_SIMPL_CHINESE = 24,
    S3E_DEVICE_LANGUAGE_TRAD_CHINESE = 25,
    S3E_DEVICE_LANGUAGE_KOREAN = 26,
    S3E_DEVICE_LANGUAGE_ICELANDIC = 27,
    S3E_DEVICE_LANGUAGE_FLEMISH = 28,
    S3E_DEVICE_LANGUAGE_THAI = 29,
    S3E_DEVICE_LANGUAGE_AFRIKAANS = 30,
    S3E_DEVICE_LANGUAGE_ALBANIAN = 31,
    S3E_DEVICE_LANGUAGE_AMHARIC = 32,
    S3E_DEVICE_LANGUAGE_ARABIC = 33,
    S3E_DEVICE_LANGUAGE_ARMENIAN = 34,
    S3E_DEVICE_LANGUAGE_AZERBAIJANI = 35,
    S3E_DEVICE_LANGUAGE_TAGALOG = 36,
    S3E_DEVICE_LANGUAGE_BELARUSSIAN = 37,
    S3E_DEVICE_LANGUAGE_BENGALI = 38,
    S3E_DEVICE_LANGUAGE_BULGARIAN = 39,
    S3E_DEVICE_LANGUAGE_BURMESE = 40,
    S3E_DEVICE_LANGUAGE_CATALAN = 41,
    S3E_DEVICE_LANGUAGE_ESTONIAN = 42,
    S3E_DEVICE_LANGUAGE_FARSI = 43,
    S3E_DEVICE_LANGUAGE_GAELIC = 44,
    S3E_DEVICE_LANGUAGE_GEORGIAN = 45,
    S3E_DEVICE_LANGUAGE_GUJARATI = 46,
    S3E_DEVICE_LANGUAGE_HEBREW = 47,
    S3E_DEVICE_LANGUAGE_HINDI = 48,
    S3E_DEVICE_LANGUAGE_INDONESIAN = 49,
    S3E_DEVICE_LANGUAGE_IRISH = 50,
    S3E_DEVICE_LANGUAGE_KANNADA = 51,
    S3E_DEVICE_LANGUAGE_KAZAKH = 52,
    S3E_DEVICE_LANGUAGE_KHMER = 53,
    S3E_DEVICE_LANGUAGE_LAO = 54,
    S3E_DEVICE_LANGUAGE_LATVIAN = 55,
    S3E_DEVICE_LANGUAGE_LITHUANIAN = 56,
    S3E_DEVICE_LANGUAGE_MACEDONIAN = 57,
    S3E_DEVICE_LANGUAGE_MALAY = 58,
    S3E_DEVICE_LANGUAGE_MALAYALAM = 59,
    S3E_DEVICE_LANGUAGE_MARATHI = 60,
    S3E_DEVICE_LANGUAGE_MOLDOVIAN = 61,
    S3E_DEVICE_LANGUAGE_MONGOLIAN = 62,
    S3E_DEVICE_LANGUAGE_PUNJABI = 63,
    S3E_DEVICE_LANGUAGE_ROMANIAN = 64,
    S3E_DEVICE_LANGUAGE_SINHALESE = 65,
    S3E_DEVICE_LANGUAGE_SOMALI = 66,
    S3E_DEVICE_LANGUAGE_SWAHILI = 67,
    S3E_DEVICE_LANGUAGE_TAJIK = 68,
    S3E_DEVICE_LANGUAGE_TAMIL = 69,
    S3E_DEVICE_LANGUAGE_TELUGU = 70,
    S3E_DEVICE_LANGUAGE_TIBETAN = 71,
    S3E_DEVICE_LANGUAGE_TIGRINYA = 72,
    S3E_DEVICE_LANGUAGE_TURKMEN = 73,
    S3E_DEVICE_LANGUAGE_URDU = 74,
    S3E_DEVICE_LANGUAGE_UZBEK = 75,
    S3E_DEVICE_LANGUAGE_VIETNAMESE = 76,
    S3E_DEVICE_LANGUAGE_WELSH = 77,
    S3E_DEVICE_LANGUAGE_ZULU = 78
} s3eDeviceLanguage;
# 869 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef enum s3eDeviceArchitecture
{
    S3E_DEVICE_ARCHITECTURE_UNKNOWN = -1,


    S3E_DEVICE_ARCHITECTURE_ARM4T = 0,
    S3E_DEVICE_ARCHITECTURE_ARM4 = 1,
    S3E_DEVICE_ARCHITECTURE_ARM5T = 2,
    S3E_DEVICE_ARCHITECTURE_ARM5TE = 3,
    S3E_DEVICE_ARCHITECTURE_ARM5TEJ = 4,
    S3E_DEVICE_ARCHITECTURE_ARM6 = 5,
    S3E_DEVICE_ARCHITECTURE_ARM6K = 6,
    S3E_DEVICE_ARCHITECTURE_ARM6T2 = 7,
    S3E_DEVICE_ARCHITECTURE_ARM6Z = 8,
    S3E_DEVICE_ARCHITECTURE_ARM7A = 12,
    S3E_DEVICE_ARCHITECTURE_ARM8A = 14,


    S3E_DEVICE_ARCHITECTURE_ARM8A_AARCH64 = 15,


    S3E_DEVICE_ARCHITECTURE_X86 = 9,
    S3E_DEVICE_ARCHITECTURE_PPC = 10,
    S3E_DEVICE_ARCHITECTURE_AMD64 = 11,
    S3E_DEVICE_ARCHITECTURE_MIPS = 13,

    S3E_DEVICE_ARCHITECTURE_MAX = 16
} s3eDeviceArchitecture;
# 905 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef enum s3eDeviceSoftKeyPosition
{
    S3E_DEVICE_SOFTKEY_BOTTOM_LEFT = 0,
    S3E_DEVICE_SOFTKEY_BOTTOM_RIGHT = 1,
    S3E_DEVICE_SOFTKEY_TOP_RIGHT = 2,
    S3E_DEVICE_SOFTKEY_TOP_LEFT = 3
} s3eDeviceSoftKeyPosition;
# 946 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetString(s3eDeviceProperty property);
# 981 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" int32 s3eDeviceGetInt(s3eDeviceProperty property);
# 1001 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceSetInt(s3eDeviceProperty property, int32 value);
# 1029 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" int64 s3eDeviceYield(int32 ms =0);
# 1051 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceUnYield();
# 1079 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceYieldUntilEvent(int32 ms =0x7fffffffL);
# 1114 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceExecPushNext(const char* filename, const char* config_prepend =__null, const char* config_append =__null);
# 1130 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceExit(int code =0) __attribute__ ((noreturn));






typedef enum s3eDeviceState
{




    S3E_DEVICE_STATE_PAUSED = 3,





    S3E_DEVICE_STATE_EXITING = 4,




    S3E_DEVICE_STATE_RUNNING = 5
} s3eDeviceState;
# 1167 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef enum s3eDeviceCallback
{
# 1180 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_PAUSE = 0,
# 1192 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNPAUSE = 1,
# 1204 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT = 2,
# 1220 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_UP = 17,
# 1236 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_DOWN = 18,
# 1254 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER_CHANGED = 20,
# 1266 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_BACKGROUND = 22,
# 1278 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_FOREGROUND = 23,
# 1295 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_ONLINE = 24,
# 1312 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_OFFLINE = 25,
# 1328 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_SIMULATOR_RESTART = 26,
# 1345 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_ACTIVE = 27,
# 1362 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INACTIVE = 28,
# 1379 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_FULLSCREEN = 29,
# 1396 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_THUMBNAIL = 30,
# 1413 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INVISIBLE = 31,
# 1430 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_OBSCURED = 32,
# 1447 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNOBSCURED = 33,

    S3E_DEVICE_CALLBACK_MAX
} s3eDeviceCallback;
# 1468 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
typedef struct s3eDeviceVolChangeInfo
{





    s3eBool m_VolUp;
# 1493 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
    s3eBool m_OverrideDefaultBehaviour;
} s3eDeviceVolChangeInfo;





typedef struct s3eDeviceStateChangeInfo
{



    int32 m_State;
} s3eDeviceStateChangeInfo;
# 1528 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceRegister(s3eDeviceCallback cbid, s3eCallback fn, void* userdata);
# 1548 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceUnRegister(s3eDeviceCallback cbid, s3eCallback fn);







extern "C" void s3eDeviceRequestQuit();
# 1567 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckQuitRequest();
# 1577 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckPauseRequest();
# 1591 "c:/marmalade/7.5/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceBacklightOn();


extern "C" s3eBool s3eDeviceNetworkCheckStart();


extern "C" s3eBool s3eDeviceNetworkCheckStop();


extern "C" void s3eDeviceLoaderCallStart(s3eBool lock, void* function);


extern "C" void s3eDeviceLoaderCallDone(s3eBool lock, void* function);


extern "C" void s3eDeviceAbort(void* pStack);
# 18 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwCore.h" 1
# 19 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2


# 1 "c:/marmalade/7.5/s3e/h/std/stdarg.h" 1
# 15 "c:/marmalade/7.5/s3e/h/std/stdarg.h"
# 1 "c:/marmalade/7.5/s3e/h/std/sys/types.h" 1
# 16 "c:/marmalade/7.5/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/7.5/s3e/h/std/stddef.h" 1
# 17 "c:/marmalade/7.5/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/7.5/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/7.5/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/7.5/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/7.5/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/7.5/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/7.5/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/7.5/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace _STL
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;




typedef int ssize_t;

typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "c:/marmalade/7.5/s3e/h/std/stdarg.h" 2
# 55 "c:/marmalade/7.5/s3e/h/std/stdarg.h"
typedef __builtin_va_list va_list;
# 22 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/7.5/s3e/h/std/stdio.h" 1
# 19 "c:/marmalade/7.5/s3e/h/std/stdio.h"
struct __XXFILE;
typedef struct __XXFILE FILE;

typedef uint32 fpos_t;
# 38 "c:/marmalade/7.5/s3e/h/std/stdio.h"
extern "C" {



struct _reent
{
  int _errno;
  void *_stdin, *_stdout, *_stderr;
};
extern struct _reent *_impure_ptr;
# 73 "c:/marmalade/7.5/s3e/h/std/stdio.h"
FILE *fopen(const char *path, const char *mode);
int fclose(FILE *fp);
int fcloseall();
int fflush(FILE *stream);

FILE *fopen(const char *path, const char *mode);
FILE *fdopen(int fildes, const char *mode);
FILE *freopen(const char *path, const char *mode, FILE *stream);

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

int fputc(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
int puts(const char *s);

int fgetc(FILE *stream);
char *fgets(char *s, int size, FILE *stream);
int getc(FILE *stream);
int getchar(void);
char *gets(char *s);
int ungetc(int c, FILE *stream);

int fseek(FILE *stream, long offset, int whence);
long ftell(FILE *stream);
void rewind(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fsetpos(FILE *stream, fpos_t *pos);

void flockfile(FILE *filehandle);
int ftrylockfile(FILE *filehandle);
void funlockfile(FILE *filehandle);

int getc_unlocked(FILE *stream);
int getchar_unlocked(void);
int putc_unlocked(int c, FILE *stream);
int putchar_unlocked(int c);

FILE *popen(const char *command, const char *type);
int pclose(FILE *stream);

char *tempnam(const char *dir, const char *pfx);




int printf(const char *format, ...) __attribute__((format(printf, 1, 2)));



int fprintf(FILE *stream, const char* format, ...) __attribute__((format(printf, 2, 3)));



int sprintf(char *str, const char* format, ...) __attribute__((format(printf, 2, 3)));



int snprintf(char *str, size_t size, const char *format, ...) __attribute__((format(printf, 3, 4)));




int scanf(const char *format, ...);



int fscanf(FILE *stream, const char *format, ...);



int sscanf(const char *str, const char *format, ...);

void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
int fileno(FILE *stream);

int remove(const char *pathname);
int rename(const char *oldpath, const char *newpath);

void perror(const char *s);



FILE *tmpfile(void);
char *tmpnam(char *s);

void setbuf(FILE *stream, char *buf);
void setbuffer(FILE *stream, char *buf, size_t size);
void setlinebuf(FILE *stream);
int setvbuf(FILE *stream, char *buf, int mode , size_t size);



int vfprintf(FILE *stream, const char *format, va_list ap);
int vsprintf(char *str, const char *format, va_list ap);
int vsnprintf(char *str, size_t size, const char *format, va_list ap);
int vprintf(const char *format, va_list ap);
int asprintf(char **strp, const char *fmt, ...);
int vasprintf(char **strp, const char *fmt, va_list ap);

int vscanf(const char *format, va_list ap);
int vsscanf(const char *str, const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);

}
# 23 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/7.5/s3e/h/std/stdlib.h" 1
# 16 "c:/marmalade/7.5/s3e/h/std/stdlib.h"
# 1 "c:/marmalade/7.5/s3e/h/std/malloc.h" 1
# 16 "c:/marmalade/7.5/s3e/h/std/malloc.h"
# 1 "c:/marmalade/7.5/s3e/h/std/alloca.h" 1
# 17 "c:/marmalade/7.5/s3e/h/std/alloca.h"
extern "C" {






    extern void *alloca(size_t __size);
# 39 "c:/marmalade/7.5/s3e/h/std/alloca.h"
}
# 17 "c:/marmalade/7.5/s3e/h/std/malloc.h" 2

extern "C" {

void *calloc(size_t nmemb, size_t size);
void *malloc(size_t size);
void free(void *ptr);
void *realloc(void *ptr, size_t size);

}
# 17 "c:/marmalade/7.5/s3e/h/std/stdlib.h" 2
# 28 "c:/marmalade/7.5/s3e/h/std/stdlib.h"
extern "C" {

double atof(const char* string);
int atoi(const char *nptr);
long atol(const char *nptr);
int64_t atoll(const char *nptr);
int64_t atoq(const char *nptr);
int abs(int j);
long int labs(long int j);
int64_t llabs(int64_t j);
void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void abort(void) __attribute__ ((noreturn));
int putenv(char *string);
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
void exit(int status) __attribute__ ((noreturn));
void _exit(int status) __attribute__ ((noreturn));
void _Exit(int status) __attribute__ ((noreturn));
unsigned long int strtoul(const char *nptr, char **endptr, int base);
uint64_t strtoull(const char *nptr, char **endptr, int base);
long int strtol(const char *nptr, char **endptr, int base);
int64_t strtoll(const char *nptr, char **endptr, int base);
double strtod(const char *nptr, char **endptr);
float strtof(const char *nptr, char **endptr);
long double strtold(const char *nptr, char **endptr);
int atexit(void (*function)(void));
int system(const char *command);
int posix_memalign(void **memptr, size_t alignment, size_t size);
char *mktemp(char *templ);
int mkstemp(char *templ);



int rand(void);
void srand(unsigned int seed);

long int random(void);
void srandom(unsigned int seed);

size_t __ctype_get_mb_cur_max();


int mblen(const char *s, size_t n);
int mbtowc(wchar_t *pwc, const char *s, size_t n);
int wctomb(char *s, wchar_t wc);
size_t mbstowcs(wchar_t *dest, const char *src, size_t n);
size_t wcstombs(char *dest, const wchar_t *src, size_t n);

typedef struct
{
    int quot;
    int rem;
} div_t;

typedef struct
{
    int quot;
    int rem;
} ldiv_t;

typedef struct
{
    int64_t quot;
    int64_t rem;
} lldiv_t;

div_t div(int numerator, int denominator);
ldiv_t ldiv(long numerator, long denominator);
lldiv_t lldiv(int64_t numerator, int64_t denominator);
# 118 "c:/marmalade/7.5/s3e/h/std/stdlib.h"
}
# 24 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2
# 51 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
typedef void(*IwAssertTextCallback)(char* pBuffer);

extern "C" {

typedef s3eErrorShowResult(*IwAssertCallback)(const char* channel, const char* pExpr, const char* pFilename, int32 line, const char* message);
typedef s3eErrorShowResult(*IwErrorCallback)(const char* message);
# 65 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceIsChannelOn(const char* channel, s3eBool default_on);
# 74 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
void IwDebugTraceDisable(s3eBool disable);




 void IwDebugTraceSetTraceChannel(const char* channel);
# 91 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 101 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 void IwDebugTraceLinePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






 void IwDebugTraceLineVPrintf(const char* fmt, va_list args);


 void IwDebugAssertSetUID(uint32 n);







 s3eBool IwDebugAssertIsChannelOn(const char* channel);







 void IwDebugClearConfigCache();
# 141 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetMessage(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 156 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetSolution(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;







 s3eErrorShowResult IwDebugAssertShow(const char* pExpr, const char* pFilename, int32 line, uint8 ignorable);






 IwAssertTextCallback IwAssertRegisterTextCallback(IwAssertTextCallback fn);






 IwAssertCallback IwAssertRegisterCallback(IwAssertCallback fn);
# 192 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
 s3eErrorShowResult IwDebugErrorShow(const char* Args, ...)

__attribute__((format(printf, 1, 2)))

;






 IwErrorCallback IwDebugErrorRegisterCallback(IwErrorCallback fn);

}
# 347 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
    static inline void IwDebugExit()
    {
        abort();
    }
# 581 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo" 1
# 21 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h" 1
# 16 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/7.5/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo" 2





# 1 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo.h" 1
# 20 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/7.5/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/7.5/s3e/h/std/c++/exception"
}
# 21 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo.h" 2
namespace std
{
    using _STL::exception;
}
# 1 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc" 1
# 39 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/7.5/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/7.5/s3e/h/std/c++/exception"
}
# 40 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc" 2

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 85 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc"
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);

  protected:
    const char *__name;

  protected:
    explicit type_info(const char *__n): __name(__n) { }

  public:



    const char* name() const;
# 133 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc"
    bool before(const type_info& __arg) const
    { return __name < __arg.__name; }
    bool operator==(const type_info& __arg) const
    { return __name == __arg.__name; }

    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


  public:
# 165 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo_gcc"
    virtual bool __is_pointer_p() const;

    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  };






  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }


    virtual ~bad_cast() throw();

    virtual const char* what() const throw();
  };


  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }


    virtual ~bad_typeid() throw();

    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 26 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo.h" 2
# 28 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo" 2
# 43 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo"
namespace _STL {



using __std_alias::type_info;



using __std_alias::bad_typeid;
# 61 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo"
using __std_alias::bad_cast;


}
# 78 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/7.5/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/7.5/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/7.5/s3e/h/std/c++/stl/_epilog.h" 2
# 79 "c:/marmalade/7.5/s3e/h/std/c++/typeinfo" 2
# 582 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 2


template <class _To, class _From>
_To IwSafeCast(_From from)
{

    if (from != __null && dynamic_cast<_To>(from) == __null)
        {
            const _STL::type_info& srctype = typeid(*from);
            const char* src = srctype.name();
            const char* target = typeid(_To).name();
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Mis-casting pointer: 0x%p is a pointer to type '%s', which is not derived from '%s'", from, src, target); switch (IwDebugAssertShow("false",
 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
# 593 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
            ,
 594
# 593 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h"
            , (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0)
                               ;
    }

    return static_cast <_To> (from);
}
# 37 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h" 1
# 16 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h"
# 1 "c:/marmalade/7.5/s3e/h/std/float.h" 1
# 31 "c:/marmalade/7.5/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/7.5/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/7.5/s3e/h/std/float.h"
    }
# 17 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h" 2
# 87 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h"
static inline int32 IwRoundFraction(double aValue)
{
    double lPositive = (aValue < 0.0f) ? -aValue : aValue;
    double lDecimal = lPositive - (double) ((int32) lPositive);
    int32 lRetVal;

    if (aValue < 0.0f)
    {
        if (lDecimal >= 0.5f)
        {
            lRetVal = ((int32) aValue) - 1;
        }
        else
        {
            lRetVal = (int32) aValue;
        }
    }
    else
    {
        if (lDecimal >= 0.5f)
        {
            lRetVal = ((int32) aValue) + 1;
        }
        else
        {
            lRetVal = (int32) aValue;
        }
    }
    return lRetVal;
}







static inline uint8 iwlzc(uint32 a)
{
    uint8 r=0;
    if ((a >> 16) == 0) {r+=16; a<<=16;}
    if ((a >> 24) == 0) {r+=8; a<<=8;}
    if ((a >> 28) == 0) {r+=4; a<<=4;}
    if ((a >> 30) == 0) {r+=2; a<<=2;}
    if ((a >> 31) == 0) {r+=1;}
    return r;
}






static inline uint8 iwlog2(uint32 a)
{
    return (uint8)(31-iwlzc(a));
}
# 161 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h"
static inline uint32 clz(uint32 a)
{

    int32 r=0;
    if ((a >> 16) == 0) {r+=16; a<<=16;}
    if ((a >> 24) == 0) {r+=8; a<<=8;}
    if ((a >> 28) == 0) {r+=4; a<<=4;}
    if ((a >> 30) == 0) {r+=2; a<<=2;}
    if ((a >> 31) == 0) {r+=1;}
    return r;
}
# 38 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 2

# 1 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h" 1
       
# 29 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
# 1 "c:/marmalade/7.5/s3e/h/s3eFile.h" 1
# 52 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef struct s3eFile s3eFile;
# 85 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef enum s3eFileSeekOrigin
{
    S3E_FILESEEK_SET = 0,
    S3E_FILESEEK_CUR = 1,
    S3E_FILESEEK_END = 2
} s3eFileSeekOrigin;




typedef struct s3eFileList s3eFileList;
# 116 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef enum s3eFileProperty
{






    S3E_FILE_ROM_EXISTS = 1,





    S3E_FILE_BYTES_TOTAL = 2,




    S3E_FILE_BYTES_FREE = 3
} s3eFileProperty;
# 146 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef enum s3eFileStats
{







    S3E_FILE_ISFILE = 0,







    S3E_FILE_ISDIR = 1,






    S3E_FILE_ISUSER = 2,
# 183 "c:/marmalade/7.5/s3e/h/s3eFile.h"
    S3E_FILE_ISWRITABLE = 3,





    S3E_FILE_SIZE = 4,
# 199 "c:/marmalade/7.5/s3e/h/s3eFile.h"
    S3E_FILE_MODIFIED_DATE = 5,
# 211 "c:/marmalade/7.5/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_FREE = 6,
# 220 "c:/marmalade/7.5/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE = 7,
# 229 "c:/marmalade/7.5/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_TOTAL = 8,






    S3E_FILE_REAL_PATH = 9,
} s3eFileStats;
# 255 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetInt(s3eFileProperty property);
# 280 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int64 s3eFileGetFileInt(const char* filename, s3eFileStats stat);
# 305 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" char* s3eFileGetFileString(const char* filename, s3eFileStats stat, char* str, int len);
# 314 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef enum s3eFileError
{
    S3E_FILE_ERR_NONE = 0,
    S3E_FILE_ERR_PARAM = 1,
    S3E_FILE_ERR_TOO_MANY = 2,
    S3E_FILE_ERR_ALREADY_REG = 3,
    S3E_FILE_ERR_NOT_FOUND = 4,
    S3E_FILE_ERR_UNAVAIL = 5,
    S3E_FILE_ERR_DEVICE = 6,
    S3E_FILE_ERR_UNSUPPORTED = 7,
    S3E_FILE_ERR_MEM = 8,
    S3E_FILE_ERR_GENERIC = 9,
    S3E_FILE_ERR_INVALID_DRIVE = 10,
    S3E_FILE_ERR_INVALID_PATH = 11,
    S3E_FILE_ERR_DATA = 12,

    S3E_FILE_ERR_INVALID_MODE = 1000,
    S3E_FILE_ERR_EXISTS = 1001,
    S3E_FILE_ERR_NOT_EMPTY = 1002,
    S3E_FILE_ERR_ACCESS = 1003,
    S3E_FILE_ERR_NO_MORE = 1004,
    S3E_FILE_ERR_EOF = 1005
} s3eFileError;
# 349 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eFileError s3eFileGetError();
# 363 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" const char* s3eFileGetErrorString();
# 414 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpen(const char* filename, const char* mode);
# 433 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpenFromMemory(void* buffer, size_t bufferLen);
# 450 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileClose(s3eFile* file);
# 471 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileFlush(s3eFile* file);
# 502 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" size_t s3eFileRead(void* buffer, size_t elemSize, size_t noElems, s3eFile* file);
# 529 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" size_t s3eFileWrite(const void* buffer, size_t elemSize, size_t noElems, s3eFile* file);
# 543 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int32 s3eFilePrintf(s3eFile* f, const char *fmt, ...);
# 563 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetChar(s3eFile* file);
# 586 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int32 s3eFilePutChar(char c, s3eFile* file);
# 624 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" char* s3eFileReadString(char* string, uint32 maxLen, s3eFile* file);
# 647 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileEOF(s3eFile* file);
# 682 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileSeek(s3eFile* file, long int offset, s3eFileSeekOrigin origin);
# 698 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" long int s3eFileTell(s3eFile* file);
# 715 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetSize(s3eFile* file);
# 741 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileMakeDirectory(const char* dirName);
# 766 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDeleteDirectory(const char* dirName);
# 782 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileCheckExists(const char* filename);
# 816 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRename(const char* src, const char* dest);
# 841 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDelete(const char* filename);
# 869 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileTruncate(const char* filename, size_t length);
# 879 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" uint64 s3eFileGetLastWriteTime(const char* filename);
# 908 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eFileList* s3eFileListDirectory(const char* dirName);
# 930 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListNext(s3eFileList* handle, char* filename, int filenameLen);
# 945 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListClose(s3eFileList* handle);







typedef struct s3eUsrFile s3eUsrFile;
# 963 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eUsrFile*(*s3eUserOpenFn)(const char* filename, const char *mode);
# 975 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef size_t (*s3eUserReadFn)(void* buffer, size_t elemLen, size_t noElems, s3eUsrFile *file);
# 987 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef size_t (*s3eUserWriteFn)(const void* buffer, size_t elemLen, size_t noElems, s3eUsrFile *file);
# 996 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eBool (*s3eUserEOFFn)(s3eUsrFile* file);
# 1007 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserSeekFn)(s3eUsrFile* file, long int offset, s3eFileSeekOrigin origin);
# 1016 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef long int (*s3eUserTellFn)(s3eUsrFile* file);
# 1025 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserCloseFn)(s3eUsrFile* file);




typedef struct s3eUsrFileList s3eUsrFileList;
# 1040 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eUsrFileList* (*s3eUserListDirFn)(const char* path);
# 1054 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListNextFn)(s3eUsrFileList* handle, char* filename, int filenameLen);
# 1064 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListCloseFn)(s3eUsrFileList* handle);
# 1074 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserDeleteFn)(const char* filename);
# 1111 "c:/marmalade/7.5/s3e/h/s3eFile.h"
typedef struct
{
    s3eUserOpenFn m_Open;
    s3eUserReadFn m_Read;
    s3eUserEOFFn m_EOF;
    s3eUserSeekFn m_Seek;
    s3eUserTellFn m_Tell;
    s3eUserCloseFn m_Close;

    s3eUserListDirFn m_ListDir;
    s3eUserListNextFn m_ListNext;
    s3eUserListCloseFn m_ListClose;

    s3eUserWriteFn m_Write;
    s3eUserDeleteFn m_Delete;

    void* m_Reserved[5];
} s3eFileUserCallbacks;
# 1141 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileAddUserFileSys(s3eFileUserCallbacks* callbacks);
# 1151 "c:/marmalade/7.5/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRemoveUserFileSys(s3eFileUserCallbacks* callbacks);





# 1 "c:/marmalade/7.5/s3e/h/legacy/s3eFile_legacy.h" 1
# 16 "c:/marmalade/7.5/s3e/h/legacy/s3eFile_legacy.h"
typedef enum s3eFilePath
{
    S3E_FILEPATH_ROM,
    S3E_FILEPATH_RAM,
    S3E_FILEPATH_MMC,
    S3E_FILEPATH_MAX
} s3eFilePath;
# 34 "c:/marmalade/7.5/s3e/h/legacy/s3eFile_legacy.h"
extern "C" uint64 s3eFileGetFree(s3eFilePath path);
# 1158 "c:/marmalade/7.5/s3e/h/s3eFile.h" 2
# 30 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h" 2

class CIwManaged;
class CIwTextParserITX;
# 50 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
typedef void(*IwSerialiseUserCallback)();





struct IwSerialiseContext
{
    bool read;
    uint32 base;
    s3eFile* handle;
    char filename[160];
    uint32 bytesRead;
    uint32 callbackPeriod;
    uint8 buffer[8];
    int32 headBit;
    uint32 version;
    uint16 versionUser;
    uint16 pad;
    IwSerialiseUserCallback callback;
};
extern IwSerialiseContext g_IwSerialiseContext;
extern int g_IwSerialiseContextValid;
# 87 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
enum IwSerialiseMode
{
    IW_SERIALISE_WRITE = 0,
    IW_SERIALISE_READ = 1
};
# 100 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline bool IwSerialiseIsReading() {return g_IwSerialiseContext.read == true;}
# 109 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline bool IwSerialiseIsWriting() {return g_IwSerialiseContext.read == false;}
# 120 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseSetUserVersion(uint16 v) {g_IwSerialiseContext.versionUser = v;}
# 129 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline uint16 IwSerialiseGetUserVersion() {return g_IwSerialiseContext.versionUser;}







static inline bool IwIsSerialiseOpen(){return (g_IwSerialiseContextValid > 0);}
# 146 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseOpen(const char* filename, IwSerialiseMode mode, bool ram=false);
# 156 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseOpen(const char* filename, bool read, bool ram=false)
{
    IwSerialiseOpen(filename, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE, ram);
}






bool IwSerialiseExists(const char* filename, bool ram=false);







bool IwSerialiseEOF();
# 184 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseOpenFromMemory(void* pBuffer, int size, IwSerialiseMode mode);







static inline void IwSerialiseOpenFromMemory(void* pBuffer, int size, bool read)
{
    IwSerialiseOpenFromMemory(pBuffer, size, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE);
}






void IwSerialiseClose();






void IwSerialiseResetCallbackCount();






void IwSerialiseSetCallbackPeriod(uint32 p);






void IwSerialiseSetCallback(IwSerialiseUserCallback cb);
# 232 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void _SerialiseScalarType(IwSerialiseContext& c, void* var, int itemSize, int numItems)
{

    if (c.read == true)
        s3eFileRead(var, itemSize, numItems, c.handle);
    else
        s3eFileWrite(var, itemSize, numItems, c.handle);
# 260 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
}
# 271 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseDouble(double& var, int n=1, int numBits=sizeof(double)*8, int stride=sizeof(double));
# 282 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseFloat(float& var, int n=1, int numBits=sizeof(float)*8, int stride=sizeof(float));
# 293 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt64(uint64& var, int n=1, int numBits=sizeof(uint64)*8, int stride=sizeof(uint64));
# 304 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt64(int64& var, int n=1, int numBits=sizeof(int64)*8-1, int stride=sizeof(int64));
# 316 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt32(uint32& var, int n=1, int numBits=sizeof(uint32)*8, int stride=sizeof(uint32));
# 327 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt32(int32& var, int n=1, int numBits=sizeof(int32)*8-1, int stride=sizeof(int32));
# 338 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt16(uint16& var, int n=1, int numBits=sizeof(uint16)*8, int stride=sizeof(uint16));
# 349 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt16(int16& var, int n=1, int numBits=sizeof(int16)*8-1, int stride=sizeof(int16));
# 360 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt8(uint8& var, int n=1, int numBits=sizeof(uint8)*8, int stride=sizeof(uint8));
# 371 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt8(int8& var, int n=1, int numBits=sizeof(int8)*8-1, int stride=sizeof(int8));
# 382 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseChar(char& var, int n=1, int numBits=sizeof(int8)*8-1, int stride=sizeof(char));
# 393 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseBool(bool& var, int n=1, int numBits=1, int stride=sizeof(bool));
# 403 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseEnum(void* pVar);





template <class T, bool SGN>
void _IwSerialiseBitDepthRequired(T& var, int n, int stride, void(*CB1)(T&, int, int, int))
{

    uint32 mb;
    if (g_IwSerialiseContext.read == false)
    {
        T* pVal = &var;
        uint32 t = n;
        mb = 1;
        while(t-- && (mb < sizeof(T)*8))
        {
            T v = *pVal;
            pVal += stride / sizeof(T);
            if (SGN)
            {
                if (v & (1ul << ((sizeof(T)*8) - 1)))
                    v = ~v;
            }
            while((v >= ((T)1 << mb)) && (mb < sizeof(T)*8))
                mb++;
        }
    }

    IwSerialiseUInt32(mb, 1, 6);
    (CB1)(var, n, mb, stride);



}
# 451 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseCharBitDepthRequired(char& var, int n=1, int stride=sizeof(char))
{
    _IwSerialiseBitDepthRequired<char, true>(var, n, stride, IwSerialiseChar);
}
# 467 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt8BitDepthRequired(int8& var, int n=1, int stride=sizeof(int8))
{
    _IwSerialiseBitDepthRequired<int8, true>(var, n, stride, IwSerialiseInt8);
}
# 483 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt8BitDepthRequired(uint8& var, int n=1, int stride=sizeof(uint8))
{
    _IwSerialiseBitDepthRequired<uint8, false>(var, n, stride, IwSerialiseUInt8);
}
# 499 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt16BitDepthRequired(int16& var, int n=1, int stride=sizeof(int16))
{
    _IwSerialiseBitDepthRequired<int16, true>(var, n, stride, IwSerialiseInt16);
}
# 515 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt16BitDepthRequired(uint16& var, int n=1, int stride=sizeof(uint16))
{
    _IwSerialiseBitDepthRequired<uint16, false>(var, n, stride, IwSerialiseUInt16);
}
# 531 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt32BitDepthRequired(int32& var, int n=1, int stride=sizeof(int32))
{
    _IwSerialiseBitDepthRequired<int32, true>(var, n, stride, IwSerialiseInt32);
}
# 547 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt32BitDepthRequired(uint32& var, int n=1, int stride=sizeof(uint32))
{
    _IwSerialiseBitDepthRequired<uint32, false>(var, n, stride, IwSerialiseUInt32);
}
# 602 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseMappedData(const uint16* pMap, void* _pData, int numStructs, int stride);
# 613 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseString(char* text, int maxLen=0);
# 626 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseManagedHash(void* pptr);






void IwSerialiseManagedObject(CIwManaged*& pObj);
# 644 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
void IwSerialiseFile(CIwTextParserITX* pParser, char const* filename, void* pptr, IwSerialiseMode mode);
# 653 "c:/marmalade/7.5/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseFile(CIwTextParserITX* pParser, char const* filename, void* pptr, bool read)
{
    IwSerialiseFile(pParser, filename, pptr, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE);
}
# 40 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 2

# 1 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h" 1
# 19 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h"
# 1 "c:/marmalade/7.5/s3e/h/s3eMemory.h" 1
# 57 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
typedef enum s3eMemoryProperty
{
# 74 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
    S3E_MEMORY_HEAP = 0,





    S3E_MEMORY_SIZE = 1,





    S3E_MEMORY_FREE = 2,





    S3E_MEMORY_USED = 3,






    S3E_MEMORY_LFB = 4,






    S3E_MEMORY_FLAGS = 5,





    S3E_MEMORY_PAGE_SIZE = 6
} s3eMemoryProperty;







typedef enum s3eMemoryFlags
{



    S3E_MEMORY_NO_MSG_ON_FAIL = (1 << 0),
# 137 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
    S3E_MEMORY_USE_STACK_ALLOCATOR = (1 << 1),
# 146 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
    S3E_MEMORY_INACTIVE = (1 << 2)
} s3eMemoryFlags;
# 169 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" int32 s3eMemoryGetInt(s3eMemoryProperty property);
# 188 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetInt(s3eMemoryProperty property, int32 value);
# 197 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
typedef enum s3eMemoryError
{
    S3E_MEMORY_ERR_NONE = 0,
    S3E_MEMORY_ERR_PARAM = 1,
    S3E_MEMORY_ERR_UNAVAIL = 5,

    S3E_MEMORY_ERR_INVALID_PTR = 1000,
    S3E_MEMORY_ERR_NO_MEM = 1001,
    S3E_MEMORY_ERR_INVALID_STATE = 1002
} s3eMemoryError;
# 219 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eMemoryError s3eMemoryGetError();
# 233 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" const char* s3eMemoryGetErrorString();
# 254 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void* s3eMalloc(size_t size);
# 278 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void* s3eRealloc(void* item, size_t newSize);
# 292 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void s3eFree(void* item);
# 311 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void* s3eMallocBase(size_t size);
# 337 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void* s3eReallocBase(void* item, size_t newSize);
# 349 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void s3eFreeBase(void* item);
# 370 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapDestroy(int32 heapID, s3eBool failIfNotEmpty);
# 385 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapCreate(int32 heapID);
# 394 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" void* s3eMemoryHeapAddress(int32 heapID);



typedef void*(*s3eMallocFn)(size_t size);
typedef void*(*s3eReallocFn)(void* item, size_t size);
typedef void (*s3eFreeFn)(void* item);




typedef struct s3eMemoryUsrMgr
{
    s3eMallocFn m_Malloc;
    s3eReallocFn m_Realloc;
    s3eFreeFn m_Free;
} s3eMemoryUsrMgr;
# 432 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 454 "c:/marmalade/7.5/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryGetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 20 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h" 2
# 62 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h"
class CIwDefaultMallocRouter
{
public:
    virtual ~CIwDefaultMallocRouter();
    virtual void* Alloc(uint32 size, uint32 objsize);
    virtual void Free(void* buf, uint32 objsize);
    virtual void* Realloc(void* buf, uint32 size, uint32 objsize);

    static CIwDefaultMallocRouter& Static();
    static void SetMallocRouter(CIwDefaultMallocRouter* a);

    static void* BaseAlloc(uint32 size, uint32 objsize);
    static void BaseFree(void* buf, uint32 objsize);
    static void* BaseRealloc(void* buf, uint32 size, uint32 objsize);
};
# 85 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h"
template <class T>
class CIwMallocRouter : public CIwDefaultMallocRouter
{
public:
    static void* DoAlloc(uint32 size)
    {
        return BaseAlloc(size, sizeof(T));
    }
    static void DoFree(void* buf)
    {
        BaseFree(buf, sizeof(T));
    }
    static void* DoRealloc(void* buf, uint32 size)
    {
        return BaseRealloc(buf, size, sizeof(T));
    }
};
# 112 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h"
template <class T, class M = CIwMallocRouter<T> > class CIwAllocator
{
public:
    typedef uint32 size_type;
    typedef int32 difference_type;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef T& reference;
    typedef const T& const_reference;
    typedef T value_type;
# 133 "c:/marmalade/7.5/modules/iwutil/h/IwAllocator.h"
    pointer allocate(size_type s)
    {
        return (pointer)M::DoAlloc(s);
    }





    pointer reallocate(pointer p, size_type s)
    {
        return (pointer)M::DoRealloc(p, s);
    }

    void deallocate(pointer p, size_type) { M::DoFree(p); }




};
# 42 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h" 2






template <class X, class A>
class ReallocateDefault
{
public:
    static X* Reallocate(uint32 q, uint32 num_p, uint32 max_p, X* p, A& a)
    {
        return a.reallocate(p, q*sizeof(X));
    }
};

template <class X, class A>
class ReallocateStandard
{
public:
    static X* Reallocate(uint32 q, uint32 num_p, uint32 max_p, X* p, A& a)
    {
        X* new_p = a.allocate(q*sizeof(X));
        for (uint32 i = 0; i < num_p; i++)
        {
            new (&new_p[i]) X(p[i]);
            p[i].~X();
        }
        a.deallocate(p, max_p);
        return new_p;
    }
};






template <class X, class A=CIwAllocator<X>, class REALLOCATE = ReallocateDefault<X, A > >
class CIwArray
{
protected:
    X * p;
    uint32 num_p;
    uint32 max_p;
    bool block_delete : 1;
    bool no_grow : 1;
public:
    typedef X * iterator;
    typedef const X * const_iterator;





    iterator begin() const { return p; }





    iterator end() const { return p+num_p; }




    bool empty() const { return num_p==0; }




    uint32 size() const { return num_p; }





    uint32 capacity() const { return max_p; }





    X* data() { return p; }





    explicit CIwArray(uint32 sz=0) : p(0), num_p(0), max_p(0), block_delete(false), no_grow(false)
    {
        resize(sz);
        clear();
    }

    ~CIwArray()
    {
        for (uint32 i=0; i<num_p; i++)
            p[i].~X();
        if (!block_delete)
        {
            a.deallocate(p, num_p);
            p = 0;
        }
    }






    CIwArray(CIwArray const & v) : p(0), num_p(0), max_p(0), block_delete(false), no_grow(false)
    {
        (*this) = v;
    }







    void SerialiseHeader()
    {

        if (g_IwSerialiseContext.read)
        {
            uint32 s;
            IwSerialiseUInt32(s);
            resize_optimised(s);
        }
        else
        {
            uint32 s = size();
            IwSerialiseUInt32(s);
        }

    }






    void operator=(CIwArray const & v)
    {
        clear();
        if (v.size() < max_p/2 || v.size() > max_p)
            set_capacity(v.size());
        for (uint32 i=0; i<v.size(); i++)
            push_back( v.p[i] );
    }





    void clear()
    {
        truncate(0);
    }






    void clear_optimised()
    {
        truncate(0);
        set_capacity(0);
    }




    int MemoryUsage() const
    {
        return sizeof(X)*max_p + sizeof(*this);
    }







    void resize_optimised(uint32 s)
    {
        if (s > num_p)
            set_capacity(s);
        resize(s);
        set_capacity(num_p);
    }






    void optimise_capacity()
    {
        if (!block_delete)
            set_capacity(num_p);
    }






    void reserve(uint32 q)
    {
        if (q > max_p)
        {
            set_capacity( q+(max_p<16 ? 2 : max_p/8) );
        }
    }






    void reserve_optimised(int q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q>=0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 268, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (q > (int)max_p)
        {
            set_capacity( q );
        }
    }







    void resize_quick(const uint32 q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q <= max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q <= max_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 283, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        num_p = q;
    }






    void resize(const uint32 q)
    {
        if (q <= num_p)
            truncate(q);
        else
            push_back_qty(q-num_p);
    }
# 308 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int find(X const & value) const
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                return i;
            }
        return -1;
    }






    bool contains(X const & value) const
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                return true;
            }
        return false;
    }
# 344 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    bool find_and_remove(X const & value)
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                erase(i, i+1);
                return true;
            }
        return false;
    }
# 366 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    bool find_and_remove_fast(X const & value)
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                erase_fast(i, i+1);
                return true;
            }
        return false;
    }







    void pop_back()
    {
        truncate(num_p-1);
    }







    X pop_back_get()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(num_p > 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("num_p > 0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 396, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        X temp = p[num_p-1];
        pop_back();
        return temp;
    }
# 412 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int erase_fast(const int i)
    {
        return erase_fast(i,i+1);
    }
# 428 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int erase_fast(const int i, const int j)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0 && j >= 0 && i <= j && (uint32)j<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("i >= 0 && j >= 0 && i <= j && (uint32)j<=num_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        const uint32 w = j-i;
        const uint32 w_copy = (((w) < (num_p-j)) ? (w) : (num_p-j));

        for (uint32 k=0; k<w_copy; k++)
            p[i+k] = p[num_p-w_copy+k];

        truncate(num_p-w);
        return i;
    }





    iterator erase_fast(iterator i)
    {
        return p + erase_fast((uint32)(i-p),(uint32)(i-p+1));
    }






    iterator erase_fast(iterator i, iterator j)
    {
        return p + erase_fast(i-p,j-p);
    }
# 470 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int erase(const int i)
    {
        return erase(i, i+1);
    }
# 484 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int erase(const uint32 i, const uint32 j)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(j>=i && j<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("j>=i && j<=num_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 486, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        const int w = j-i;
        for (uint32 k=i; k<num_p-w; k++)
            p[k] = p[k+w];
        truncate(num_p-w);
        return i;
    }





    iterator erase(iterator i)
    {
        return p + erase((uint32)(i-p),(uint32)(i-p+1));
    }






    iterator erase(iterator i, iterator j)
    {
        return p + erase(i-p,j-p);
    }







    void insert_slow(X const & x, uint32 pos)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pos<=size())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("pos<=size()", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 521, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (pos==size())
            push_back(x);
        else
        {
            reserve(num_p+1);
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(num_p>=1)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("num_p>=1", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 527, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


            new (&p[num_p]) X(p[num_p-1]);
            for (int k=num_p-pos-2; k>=0; k--)
            {
                p[pos+k+1] = p[pos+k];
            }
            num_p++;
            p[pos] = x;
        }
    }







    void insert_slow(CIwArray &a, uint32 pos)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pos<=size())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("pos<=size()", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 548, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (pos==size())
            append(a);
        else
        {
            int s = a.size();
            reserve(num_p+s);


            for (int k=num_p-pos-1; k>=0; k--)
            {
                if (pos+k+s>=num_p)
                    new (&p[pos+k+s]) X(p[pos+k]);
                else
                    p[pos+k+s] = p[pos+k];
            }
            for (int i=0;i<s;i++)
            {
                if (pos+i>=num_p)
                    new (&p[pos+i]) X(a.p[i]);
                else
                    p[pos+i] = a.p[i];
            }
            num_p+=s;
        }
    }






    X const & back() const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 582, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[size()-1];
    }
    X & back()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 587, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[size()-1];
    }






    X const & front() const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 598, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[0];
    }

    X & front()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 604, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[0];
    }





    int append(X const & x) { return push_back(x); }
# 621 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    int append(CIwArray & a)
    {
        int c = num_p;
        resize(num_p+a.num_p);
        for (uint32 d=0;d<a.num_p;d++)
            p[c+d] = a.p[d];
        return num_p-1;
    }







    int push_back(X const & x)
    {
# 650 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!(&x>=p && &x<p+max_p))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("!(&x>=p && &x<p+max_p)", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 650, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        reserve(num_p+1);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(num_p < max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("num_p < max_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 653, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        new (p+num_p) X(x);
        return num_p++;
    }






    int push_back()
    {
        reserve(num_p+1);
        new (p+num_p) X;
        return num_p++;
    }







    void push_back_qty(X const & x, int qty)
    {
        if (!qty) return;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!(&x>=p && &x<p+max_p))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("!(&x>=p && &x<p+max_p)", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 679, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(qty>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("qty>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 680, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        reserve(num_p+qty);
        for (int i=0; i<qty; i++)
        {
            new (p+num_p+i) X(x);



        }
        num_p+=qty;
    }






    void push_back_qty(int qty)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(qty>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("qty>=0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 699, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        reserve(num_p+qty);
        for (int i=0; i<qty; i++)
            new (p+num_p+i) X;
        num_p+=qty;
    }







    X & operator [] (int const i) const
    {
        uint32 index = (uint32)i;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i>=0 && index<num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1731); IwDebugAssertSetMessage ("invalid index (%d) into array of size %u", i, (uint)num_p); switch (IwDebugAssertShow("i>=0 && index<num_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 715, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[index];
    }






    void Share(CIwArray<X,A> const & other)
    {
        if (!block_delete)
            clear_optimised();
        p=other.p;
        num_p=other.num_p;
        max_p=other.max_p;
        block_delete = true;
    }
# 741 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    void Share(X* buffer, int current, int max)
    {
        if (!block_delete)
            clear_optimised();
        p=buffer;
        num_p=current;
        max_p=max;
        block_delete = true;
    }





    bool CanResize()
    {
        return !block_delete;
    }
# 767 "c:/marmalade/7.5/modules/iwutil/h/IwArray.h"
    void LockSize(bool lock)
    {
        no_grow = lock;
    }





    void set_capacity(uint32 q);






    void truncate(const uint32 q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q<=num_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 785, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        for (uint32 i=q; i<num_p; i++)
            p[i].~X();
        num_p = q;
    }





    void swap(CIwArray<X,A>& v)
    {
        X* tmp_p = p;
        uint32 tmp_num_p = num_p;
        uint32 tmp_max_p = max_p;
        bool tmp_block_delete = block_delete;
        bool tmp_no_grow = no_grow;

        p = v.p;
        num_p = v.num_p;
        max_p = v.max_p;
        block_delete = v.block_delete;
        no_grow = v.no_grow;

        v.p = tmp_p;
        v.num_p = tmp_num_p;
        v.max_p = tmp_max_p;
        v.block_delete = tmp_block_delete;
        v.no_grow = tmp_no_grow;
    }

private:
    A a;
};

template <class X, class A, class REALLOCATE>
void CIwArray<X,A,REALLOCATE>::set_capacity(uint32 q)
{
    do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(!block_delete)) { if( (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1733); IwDebugAssertSetMessage ("Attempting to change capacity of an array that doesn't own its data allocation."); switch (IwDebugAssertShow("!block_delete", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 824, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!no_grow || q <= max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1732); IwDebugAssertSetMessage ("Attempting to expand an array that has its size locked."); switch (IwDebugAssertShow("!no_grow || q <= max_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 825, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q>=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q>=num_p", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 826, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    if (max_p==q) return;
    max_p = q;
    if (q==0)
    {
        a.deallocate(p, max_p);
        p = 0;
    }
    else
    {
        p = REALLOCATE::Reallocate(q, num_p, max_p, p, a);
    }
}



template<>
class CIwArray<bool, CIwAllocator<bool> >
{
    CIwArray<uint32, CIwAllocator<uint32> > b;
    int l;
    void fit()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(l>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(268); IwDebugAssertSetMessage ("CIwArray<bool>"); switch (IwDebugAssertShow("l>=0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 849, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        b.resize((l+31) >> 5);
    }
public:
    CIwArray<bool, CIwAllocator<bool> >(int sz=0) : l(sz) { fit(); }
    void resize(int s)
    {
        l = s;
        fit();
    }
    void resize(int s, bool set_value)
    {
        resize(s);
        set_all(set_value);
    }
    void clear()
    {
        resize(0);
    }
    void clear_optimised()
    {
        b.clear_optimised();
    }
    uint32 size() const
    {
        return l;
    }
    void push_back(bool i)
    {
        l++;
        fit();
        set(l-1, i);
    }
    bool pop_back()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(l>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(269); IwDebugAssertSetMessage ("CIwArray<bool>"); switch (IwDebugAssertShow("l>0", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 884, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        bool r = (*this)[l-1];
        l--;
        fit();
        return r;
    }
    void set_all(bool v)
    {
        for (uint32 i=0; i<b.size(); i++)
            b[i] = v ? 0xffffffff : 0;
    }
    void set(int i, bool v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!((i>=0 && i<l))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(270); IwDebugAssertSetMessage ("CIwArray<bool> overflow"); switch (IwDebugAssertShow("(i>=0 && i<l)", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 897, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (v)
            b[i>>5] |= (1<<(i&31));
        else
            b[i>>5] &= ~(1<<(i&31));
    }
    bool operator[] (int i) const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!((i>=0 && i<l))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(271); IwDebugAssertSetMessage ("CIwArray<bool> overflow"); switch (IwDebugAssertShow("(i>=0 && i<l)", "c:/marmalade/7.5/modules/iwutil/h/IwArray.h", 905, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return (b[i>>5] & (1<<(i&31))) != 0;
    }

    void Serialise()
    {

        int32 il = l;
        IwSerialiseInt32(il);
        l = il;
        b.SerialiseHeader();
        IwSerialiseUInt32(*b.data(), b.size());

    }
};
# 18 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h" 1
       
# 22 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h" 1
       
# 30 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h"
# 1 "c:/marmalade/7.5/s3e/h/s3eTimer.h" 1
# 55 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
typedef enum s3eTimerProperty
{
    S3E_TIMER_RESOLUTION
} s3eTimerProperty;
# 67 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
typedef enum s3eTimerError
{
    S3E_TIMER_ERR_NONE = 0,
    S3E_TIMER_ERR_PARAM = 1,
    S3E_TIMER_ERR_TOO_MANY = 2,
    S3E_TIMER_ERR_ALREADY_REG = 3,
    S3E_TIMER_ERR_NOT_FOUND = 4,
    S3E_TIMER_ERR_UNAVAIL = 5
} s3eTimerError;
# 88 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" s3eTimerError s3eTimerGetError();
# 101 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" const char* s3eTimerGetErrorString();
# 117 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" int32 s3eTimerGetInt(s3eTimerProperty property);
# 131 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUST();
# 142 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUSTNanoseconds();




extern "C" uint64 s3eTimerGetMs();





extern "C" int64 s3eTimerGetUTC();
# 162 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetLocaltimeOffset(int64* when =__null);
# 194 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerSetTimer(uint32 ms, s3eCallback fn, void* userData);
# 215 "c:/marmalade/7.5/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerCancelTimer(s3eCallback fn, void* userData);
# 31 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h" 2

extern "C" {
# 41 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h"
typedef struct _IwCallStack
{
    const char** m_Stack;
    const char** m_StackPtr;

} IwCallStack;

void IwCallStackLeave(void* pObj);
void IwCallStackSetStackSizeLimit(uint32 limit);
void IwCallStackSetStackAddress(uint32 addr);
void IwCallStackPrintStack(char* pBuffer);
IwCallStack* IwCallStackGet();







void IwCallStackInit();
void IwCallStackTerm();


s3eBool IwCallStackEnter(const char* pName, void* pObj);




void IwCallStackFunctionDumpToFile(const char* filename);





    void IwCallStackSetCallStackTracing(bool bOnOrOff);



void IwProfileStartProfile(const char* name);
void IwProfileStopProfile();
void IwProfileIncrementFrameCounter();
void IwProfileReset();

}
# 93 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h"
class CIwCallStack
{
public:

    CIwCallStack(const char* pName)
    {
        m_Entered = IwCallStackEnter(pName, (void*)this);
    }
    ~CIwCallStack()
    {
        if( m_Entered )
            IwCallStackLeave((void*)this);
    }
    s3eBool m_Entered;
};
# 214 "c:/marmalade/7.5/modules/iwutil/h/IwRuntime.h"
class CIwProfileNode
{
public:
    CIwProfileNode(const char* name, CIwProfileNode* parent);
    ~CIwProfileNode();

    CIwProfileNode* GetSubNode(const char* name);

    CIwProfileNode* GetParent() {return m_Parent;}
    CIwProfileNode* GetSibling() {return m_Sibling;}
    CIwProfileNode* GetChild() {return m_Child;}

    void Reset();
    void Call();
    bool Return();
    void NewFrame();

    const char* GetName() {return m_Name;}
    long GetTotalCalls() {return m_TotalCalls;}
    float GetTotalTime() {return m_TotalTime;}
    float GetLastTime() {return m_LastTime;}

    long GetLastFrameCalls(){ return m_LastFrameCalls; }
    float GetLastFrameTime() { return m_LastFrameTime; }
    float GetFrameTimeAvg() { return m_FrameWeightedAvg; }

    bool IsRemainingTimeNode() { return m_IsOtherTimeNode; }

protected:
    const char* m_Name;
    long m_TotalCalls;
    float m_TotalTime;
    float m_LastTime;
    float m_WeightedAvg;

    long m_FrameCalls;
    float m_FrameTime;
    float m_FrameWeightedAvg;

    long m_LastFrameCalls;
    float m_LastFrameTime;

    int32 m_StartTime;
    long m_RecursionCounter;

    bool m_IsOtherTimeNode;

    CIwProfileNode* m_Parent;
    CIwProfileNode* m_Child;
    CIwProfileNode* m_Sibling;
};




class CIwProfileIterator
{
public:

    void First();
    void Next();
    bool IsDone();

    void EnterChild(long index);
    void EnterParent();


    const char* GetCurrentName() {return m_CurrentChild->GetName();}
    long GetCurrentTotalCalls() {return m_CurrentChild->GetTotalCalls();}
    float GetCurrentTotalTime() {return m_CurrentChild->GetTotalTime();}
    float GetCurrentLastTime() {return m_CurrentChild->GetLastTime();}
    float GetCurrentLastFrameTime() {return m_CurrentChild->GetLastFrameTime();}
    long GetCurrentLastFrameCalls() {return m_CurrentChild->GetLastFrameCalls();}
    float GetCurrentFrameTimeAvg() {return m_CurrentChild->GetFrameTimeAvg();}
    bool IsCurrentRemainingTimeNode() {return m_CurrentChild->IsRemainingTimeNode();}




    const char* GetCurrentParentName() {return m_CurrentParent->GetName();}
    long GetCurrentParentTotalCalls() {return m_CurrentParent->GetTotalCalls();}
    float GetCurrentParentTotalTime() {return m_CurrentParent->GetTotalTime();}


protected:
    CIwProfileNode* m_CurrentParent;
    CIwProfileNode* m_CurrentChild;

    CIwProfileIterator(CIwProfileNode* start);
    friend class CIwProfileManager;
};




class CIwProfileManager
{
public:
    CIwProfileManager(uint32 maxNodes=200);
    ~CIwProfileManager();

    inline void SetActive(bool active) {m_Active = active;}
    void StartProfile(const char* name);
    void StopProfile();

    void Reset();
    void IncrementFrameCounter();
    inline long GetFrameCountSinceReset() {return m_FrameCounter;}
    float GetTimeSinceReset();

    inline CIwProfileIterator* GetIterator() {return new CIwProfileIterator(&m_Root);}
    inline void ReleaseIterator(CIwProfileIterator* iterator ) {delete iterator;}


    static CIwProfileManager& Get();

    static CIwProfileManager* g_Singleton;

    CIwProfileNode* AllocNode(const char* name, CIwProfileNode* parent);

private:
    bool m_Active;
    CIwProfileNode m_Root;
    CIwProfileNode* m_CurrentNode;
    long m_FrameCounter;
    int64 m_ResetTime;
    uint32* m_Memory;
    uint32* m_MemoryCursor;
    int32 m_FreeNodes;
};




class CIwProfileSample
{
public:
    CIwProfileSample(const char* name) {IwProfileStartProfile(name);}
    ~CIwProfileSample() {IwProfileStopProfile();}
};
# 23 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h" 2
# 42 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
typedef void*(*IwClassFactoryFn)();
typedef void*(*IwClassSizeFactoryFn)();
# 146 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryReserve(int number);
# 156 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void* IwClassFactoryCreate(uint32 hash);
# 165 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
bool IwClassFactoryExists(uint32 hash);
# 174 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void* IwClassFactoryCreate(const char* name);
# 184 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryAdd(uint32 hash, IwClassFactoryFn fn, uint32 size = 0);
# 193 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryAdd(const char* name, IwClassFactoryFn fn, uint32 size = 0);
# 202 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryRemove(uint32 hash);
# 211 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
IwClassFactoryFn IwClassFactoryGet(uint32 hash);

uint32 IwClassFactoryGetSize(uint32 hash);
# 223 "c:/marmalade/7.5/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryModify(uint32 hash, IwClassFactoryFn fn, uint32 size);
# 19 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwCopyingPtr.h" 1
       
# 30 "c:/marmalade/7.5/modules/iwutil/h/IwCopyingPtr.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h" 1
       
# 38 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
enum IwMemBucketID
{
    IW_MEM_BUCKET_ID_SYSTEM = 0,
    IW_MEM_BUCKET_ID_SYSTEM_DEBUG,
    IW_MEM_BUCKET_ID_USER,
};






enum IwMemBucketAllocFailBehaviour
{
    IW_MEM_BUCKET_ALLOC_FAIL_ERROR = 0,
    IW_MEM_BUCKET_ALLOC_FAIL_ASSERT,
    IW_MEM_BUCKET_ALLOC_FAIL_SILENT,

    IW_MEM_BUCKET_ALLOC_FAIL_DEFAULT = IW_MEM_BUCKET_ALLOC_FAIL_ERROR
};

class CIwMemBucket;

extern "C" {
# 74 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketCreate(uint32 bucketID, const char* name, uint32 size);
# 93 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketRegister(uint32 bucketID, const char* name, CIwMemBucket* bucket, void* data=__null);







void IwMemBucketFree(uint32 bucketID);







void IwMemBucketSet(uint32 bucketID);







uint32 IwMemBucketGetID();
# 127 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
int32 IwMemBucketGetFreeID(uint32 afterID = 0);







CIwMemBucket* IwMemBucketGet();







void IwMemBucketPush(uint32 bucketID);






void IwMemBucketPop();
# 172 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketSetAllocFailBehaviour(IwMemBucketAllocFailBehaviour behaviour);
# 182 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
IwMemBucketAllocFailBehaviour IwMemBucketGetAllocFailBehaviour();
# 199 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketCheckpoint();







uint32 IwMemBucketDebugGetID(void* item);
# 219 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketDebugCheck(uint32 bucketID, uint32 checkpoint, const char* filename);







void IwMemBucketVisualDump(const char* filename, int32 bucketID = -1);






typedef enum IwMemBucketDebugFlag
{
    IW_MEM_BUCKET_LOCK_FREE = 1 << 0,
    IW_MEM_BUCKET_LOCK_ALLOC = 1 << 1,
    IW_MEM_BUCKET_LOCK_SELECT = 1 << 2,
    IW_MEM_BUCKET_TRACE = 1 << 3,
    IW_MEM_BUCKET_LOCK_REALLOC = 1 << 4,
    IW_MEM_BUCKET_REUSE_IDS_FOR_REALLOC = 1 << 5,
} IwMemBucketDebugFlag;
# 251 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugSetFlags(uint32 bucketID, uint32 flags);
# 260 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugClearFlags(uint32 bucketID, uint32 flags);
# 270 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugSetBreakpoint(uint32 allocationID);
# 289 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetFree(uint32 bucketID);
# 298 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetLargestFreeBlock(uint32 bucketID);
# 308 "c:/marmalade/7.5/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetUsed(uint32 bucketID);

}







class CIwAutoBucketSwitch
{
public:
    CIwAutoBucketSwitch(int bucket) : m_RestoreBucket(IwMemBucketGetID())
    {
        IwMemBucketSet(bucket);
    }
    ~CIwAutoBucketSwitch()
    {
        IwMemBucketSet(m_RestoreBucket);
    }

private:
    int m_RestoreBucket;
};
# 31 "c:/marmalade/7.5/modules/iwutil/h/IwCopyingPtr.h" 2



template<class T>
class CIwStandardAllocator
{
public:
    static T* allocate(uint32 size)
    {
        return (T*)s3eMalloc(size);
    }

    static T* reallocate(T* p, uint32 size)
    {
        return (T*)s3eRealloc(p, size);
    }

    static void deallocate(T* p, uint32) { s3eFree(p); }
};


template <class Type, class Allocator = CIwStandardAllocator<Type> >
class CIwCopyingPtr
{
public:
    CIwCopyingPtr() : m_Ptr(__null) {}
    ~CIwCopyingPtr()
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }
        m_Ptr = __null;
    }




    CIwCopyingPtr(const CIwCopyingPtr& rhs)
    {
        if (rhs.m_Ptr)
        {
            m_Ptr = new (Allocator::allocate(sizeof(Type))) Type;
            *m_Ptr = *rhs.m_Ptr;
        }
        else
        {
            m_Ptr = __null;
        }
    }

    CIwCopyingPtr& operator=(const CIwCopyingPtr& rhs)
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }

        if (rhs.m_Ptr)
        {
            m_Ptr = new (Allocator::allocate(sizeof(Type))) Type;
            *m_Ptr = *rhs.m_Ptr;
        }
        else
        {
            m_Ptr = __null;
        }
        return *this;
    }




    CIwCopyingPtr& operator= (Type* pPtr)
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }
        m_Ptr = pPtr;
        return *this;
    }

    Type* operator->() const
    {
        return m_Ptr;
    }

    Type& operator*() const
    {
        return *m_Ptr;
    }

    bool operator!= (Type* pPtr) const
    {
        return m_Ptr != pPtr;
    }


    void Release()
    {
        m_Ptr = __null;
    }

private:



    Type* m_Ptr;
};

template<class T>
class CIwDebugAllocator
{
public:
    static T* allocate(uint32 size)
    {

        IwMemBucketPush(IW_MEM_BUCKET_ID_SYSTEM_DEBUG);


        T* alloc = (T*)s3eMalloc(size);


        IwMemBucketPop();

        return alloc;
    }

    static T* reallocate(T* p, uint32 size)
    {

        IwMemBucketPush(IW_MEM_BUCKET_ID_SYSTEM_DEBUG);


        T* alloc = (T*)s3eRealloc(p, size);


        IwMemBucketPop();

        return alloc;
    }


    static void deallocate(T* p, uint32) { s3eFree(p); }
};
# 20 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2

# 1 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h" 1
       
# 17 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwString.h" 1
# 24 "c:/marmalade/7.5/modules/iwutil/h/IwString.h"
# 1 "c:/marmalade/7.5/s3e/h/std/string.h" 1
# 17 "c:/marmalade/7.5/s3e/h/std/string.h"
extern "C" {

void *memcpy(void *dest, const void *src, size_t n);
void *memset(void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memmove(void *dest, const void *src, size_t n);
void *memchr(const void *s, int c, size_t n);
void *memrchr(const void *s, int c, size_t n);
# 34 "c:/marmalade/7.5/s3e/h/std/string.h"
int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
char *strsep(char **stringp, const char *delim);
char *strcpy(char *dest, const char *src);
char *strncpy(char *dest, const char *src, size_t n);
char *strchr(const char *s, int c);
char *strstr(const char *haystack, const char *needle);
char *strrchr(const char *s, int c);
char *strdup(const char *s);
char *strtok(char *str, const char *delim);
char *strtok_r(char *str, const char *delim, char **saveptr);
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
size_t strlen(const char *s);
size_t strnlen(const char *s, size_t n);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);
size_t strspn(const char *s, const char *accept);
size_t strcspn(const char *s, const char *reject);
char *strpbrk(const char *s, const char *accept);
int strcoll(const char *s1, const char *s2);
char *strerror(int errnum);
size_t strxfrm(char *dest, const char *src, size_t n);

int strerror_r(int errnum, char *buf, size_t buflen);





size_t strlcpy(char* dest, const char* src, size_t len);
size_t strlcat(char* dest, const char* src, size_t len);

char* strnstr(const char *s, const char *find, size_t slen);

}
# 25 "c:/marmalade/7.5/modules/iwutil/h/IwString.h" 2
# 74 "c:/marmalade/7.5/modules/iwutil/h/IwString.h"
template <int N>
class CIwString
{


public:
    inline CIwString()
    {
        m_Buffer[0] = '\0';
    };

    CIwString(const char* pText)
    {
        m_Buffer[0] = '\0';
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(276); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", pText, N); switch (IwDebugAssertShow("strlen(pText) < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 88, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, pText);
    };
# 104 "c:/marmalade/7.5/modules/iwutil/h/IwString.h"
    inline const char* c_str() const {return m_Buffer;}
# 113 "c:/marmalade/7.5/modules/iwutil/h/IwString.h"
    inline int size() const {return (int)strlen(m_Buffer);}
# 122 "c:/marmalade/7.5/modules/iwutil/h/IwString.h"
    inline int length() const {return (int)strlen(m_Buffer);}






    inline int capacity() const {return N-1;}






    inline void setLength(int len)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(len >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(277); IwDebugAssertSetMessage ("Length must be >= 0"); switch (IwDebugAssertShow("len >= 0", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 138, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(len < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(278); IwDebugAssertSetMessage ("Length too long - maximum size (including terminator character) is %d characters", N); switch (IwDebugAssertShow("len < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 139, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        m_Buffer[len] = '\0';
    }

    inline int find(const char* substr)
    {
        char*p = strstr(m_Buffer, substr);
        if (p)
            return (int)(p - m_Buffer);
        return -1;
    }

    inline CIwString substr(int pos, int len = -1) const
    {
        if (len < 0)
            len = length() - pos;

        CIwString s(m_Buffer + pos);
        s.setLength(len);
        return s;
    }

    inline char & operator [] (int i)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(279); IwDebugAssertSetMessage ("Index must be >= 0"); switch (IwDebugAssertShow("i >= 0", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 163, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i < length())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(280); IwDebugAssertSetMessage ("Index is %d, but length of string is only %d characters", i, length()); switch (IwDebugAssertShow("i < length()", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 164, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return m_Buffer[i];
    }

    inline const char & operator [] (int i) const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(281); IwDebugAssertSetMessage ("Index must be >= 0"); switch (IwDebugAssertShow("i >= 0", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 170, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i < length())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(282); IwDebugAssertSetMessage ("Index is %d, but length of string is only %d characters", i, length()); switch (IwDebugAssertShow("i < length()", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 171, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return m_Buffer[i];
    }






    const char* operator = (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(283); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", pText, N); switch (IwDebugAssertShow("strlen(pText) < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 182, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, pText);
        return m_Buffer;
    };

    const char* operator = ( CIwString const& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(284); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", str.c_str(), N); switch (IwDebugAssertShow("str.length() < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 189, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, str.c_str());
        return m_Buffer;
    };

    const char* operator += (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(285); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, pText, N); switch (IwDebugAssertShow("strlen(m_Buffer) + strlen(pText) < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 196, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcat(m_Buffer, pText);
        return m_Buffer;
    };

    const char* operator += (CIwString const& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(286); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, str.c_str(), N); switch (IwDebugAssertShow("strlen(m_Buffer) + str.length() < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 203, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcat(m_Buffer, str.c_str());
        return m_Buffer;
    };

    CIwString operator + (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(287); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, pText, N); switch (IwDebugAssertShow("strlen(m_Buffer) + strlen(pText) < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 210, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        CIwString ns = *this;
        strcat(ns.m_Buffer, pText);
        return ns;
    }

    CIwString operator + (const CIwString& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(288); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, str.c_str(), N); switch (IwDebugAssertShow("strlen(m_Buffer) + str.length() < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 218, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        CIwString ns = *this;
        strcat(ns.m_Buffer, str.c_str());
        return ns;
    }

    const char* operator += (char c)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + 1 < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(289); IwDebugAssertSetMessage ("String '%s%c' too long - maximum size (including terminator character) is %d characters", m_Buffer, c, N); switch (IwDebugAssertShow("strlen(m_Buffer) + 1 < N", "c:/marmalade/7.5/modules/iwutil/h/IwString.h", 226, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        char str[2] = {c, '\0'};
        strcat(m_Buffer, str);
        return m_Buffer;
    };

    bool operator== (const char* str) const
    {
        return !strcmp(m_Buffer, str);
    }

    bool operator== (const CIwString& str) const
    {
        return !strcmp(m_Buffer, str.c_str());
    }






    inline void Serialise()
    {
        IwSerialiseString(m_Buffer, N);
    }


private:
    char m_Buffer[N];
};

template <int N>
static inline CIwString<N> operator + (const char *str1, const CIwString<N> &str2)
{
    return CIwString<N>(str1) + str2;
}






typedef CIwString<32> CIwStringS;




typedef CIwString<160> CIwStringL;
# 18 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h" 2
# 40 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h"
uint32 IwHashString(const char* pChar);
# 49 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h"
template<int N> uint32 IwHashString(const CIwString<N>& sz)
{
    CIwCallStack _callstack("IwHashString"); {}

    return IwHashString(sz.c_str());
}
# 65 "c:/marmalade/7.5/modules/iwutil/h/IwHashString.h"
uint32 IwHashString(const char* pChar, uint32 hash);
# 22 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2

# 1 "c:/marmalade/7.5/modules/iwutil/h/IwTextParseable.h" 1
       
# 21 "c:/marmalade/7.5/modules/iwutil/h/IwTextParseable.h"
class CIwTextParserITX;
# 41 "c:/marmalade/7.5/modules/iwutil/h/IwTextParseable.h"
class CIwParseable
{
public:


    typedef CIwArray<CIwParseable*> Array;

    typedef Array::iterator ArrayIt;

    virtual ~CIwParseable() {}
# 60 "c:/marmalade/7.5/modules/iwutil/h/IwTextParseable.h"
    virtual void ParseOpen(CIwTextParserITX* pParser) = 0;







    virtual void ParseClose(CIwTextParserITX* pParser) = 0;







    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName) = 0;
};
# 24 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h" 1
       
# 22 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwSingleton.h" 1
# 23 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h" 2

# 1 "c:/marmalade/7.5/modules/iwutil/h/IwTypes.h" 1
# 37 "c:/marmalade/7.5/modules/iwutil/h/IwTypes.h"
enum
{

    IW_TYPE_NONE = 0,
    IW_TYPE_CHAR,
    IW_TYPE_BOOL,
    IW_TYPE_INT8,
    IW_TYPE_UINT8,
    IW_TYPE_INT16,
    IW_TYPE_UINT16,
    IW_TYPE_INT32,
    IW_TYPE_UINT32,
    IW_TYPE_FLOAT,
    IW_TYPE_DOUBLE,
    IW_TYPE_STRING,
    IW_TYPE_COMPOUND,
    IW_TYPE_MAX,

    IW_TYPE_MAX_BIT = 4,


    IW_TYPE_PAD_F = (1 << 4),


    IW_TYPE_FREE_BIT = 6
};
# 25 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h" 2


class CIwMenuItem;
class CIwMenu;
# 44 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
typedef CIwStringS CIwMenuString;
# 53 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
class CIwMenuItem
{
public:

    enum
    {
        HILITE_F = (1 << 0),
        UNSELECTABLE_F = (1 << 1),
        NO_SCROLL_F = (1 << 2),
        PARAGRAPH_END_F = (1 << 3),
    };




    enum ColourID
    {
        TITLE,
        MENU,
        FIELD,
        BOOL,
        STRING,
        FIXED,
        HILITE,
        MAX_COLOUR_ID,
    };

    typedef CIwArray<CIwMenuItem*> Array;
    typedef Array::iterator ArrayIt;


    CIwMenuItem(const char* name, const char* text, uint32 flags = 0, ColourID colID = FIELD);
    virtual ~CIwMenuItem();





    virtual void Update(bool active);






    virtual void Render(int32 x, int32 y);





    virtual void Enter() { m_Flags |= HILITE_F;}





    virtual void Exit() { m_Flags &= ~HILITE_F;}





    virtual void Select() { };





    virtual void Back();





    virtual void Run()
    {

        Select();
    };





    virtual void Plus() { };





    virtual void Minus() { };






    inline void SetSelectable(bool s)
    {
        if (s == true)
            m_Flags &= ~UNSELECTABLE_F;
        else
            m_Flags |= UNSELECTABLE_F;
    }





    inline CIwMenu* GetMenu() const {return m_Menu;}




    const char* m_Name;
    ColourID m_ColourID;
    CIwMenuString m_Text;
    int32 m_X;
    int32 m_Y;
    int32 m_W;
    int32 m_H;
private:
    int32 m_Flags;
    CIwMenu* m_Menu;

    friend class CIwMenu;
};
# 189 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
class CIwMenu
{
public:

    enum
    {
        UPDATE_ALWAYS_F = (1 << 0),
        RENDER_ALWAYS_F = (1 << 1),
    };

    typedef CIwArray<CIwMenu*> Array;
    typedef Array::iterator ArrayIt;


    CIwMenu(int32 x = -1, int32 y = -1, uint32 flags = 0);
    virtual ~CIwMenu();


    virtual void Update(bool active);


    virtual void Render(bool active);


    virtual void Enter();


    virtual void Exit();






    virtual int32 AddItem(CIwMenuItem* item, int32 index = -1);





    virtual void RemoveItem(int32 index);







    virtual void SetNextSelectable(bool down, int start = -1, int count = 1);





    virtual void SetItemID(int32 id);






    virtual void SetXY(int32 x, int32 y) { m_X = x, m_Y = y;}




    CIwMenuItem::Array m_ItemArray;
    int32 m_Flags;
    int32 m_ItemID;
    int32 m_X;
    int32 m_Y;
    int32 m_ScrollID;
    int32 m_ScrollHeight;
    CIwMenu* m_Parent;
    bool m_Wrap;
};







class CIwMenuManager
{
public:



    typedef void(*TextCallback)(const char* line, int32 x, int32 y, CIwMenuItem::ColourID colID);



    typedef CIwMenu*(*MainFn)();


    enum
    {

        INPUT_UP_F = (1 << 0),
        INPUT_DOWN_F = (1 << 1),
        INPUT_LEFT_F = (1 << 2),
        INPUT_RIGHT_F = (1 << 3),
        INPUT_RUN_F = (1 << 4),
        INPUT_SHIFT_F = (1 << 5),
        INPUT_CTRL_F = (1 << 6),
        INPUT_PLUS_F = (1 << 7),
        INPUT_MINUS_F = (1 << 8),
        INPUT_MASK = (1 << 9) - 1,


        DESTROY_MENU_F = (1 << 10),
        SELECT_MENU_F = (1 << 11),
        REBUILD_MENU_F = (1 << 12),
        UPDATE_F = (1 << 14),
        RENDER_F = (1 << 15),
    };


    CIwMenuManager();
    virtual ~CIwMenuManager();




    void DestroyMenus();






    virtual void Update();






    virtual void Render();





    void AddMenu(CIwMenu* menu);





    void AddMenuOrDestroy(CIwMenu* pMenu);




    inline void DestroyMenu() {m_Flags |= DESTROY_MENU_F;}





    void SelectMenu(int32 forceID = -1)
    {
        m_Flags |= SELECT_MENU_F;
        m_ForceItemID = forceID;
    }





    void RebuildMenu(int32 forceID = -1)
    {
        m_Flags |= REBUILD_MENU_F;
        m_ForceItemID = forceID;
    }






    inline void SetMenuCharWH(uint32 w, uint32 h)
    {
        m_CharW = w;
        m_CharH = h;
    }






    inline void SetMenuDefaultXY(uint32 x, uint32 y)
    {
        m_MenuDefaultX = x;
        m_MenuDefaultY = y;
    }





    inline void SetMenuDefaultW(uint32 w)
    {
        m_MenuDefaultW = w;
    }





    inline void SetTextCallback(TextCallback cb) {m_TextCallback = cb;}





    inline void SetFocusKey(int32 k) {m_KeyDef[MK_FOCUS] = k;}





    inline bool HasFocus() {return m_Focus;}





    void SetFocus(bool focus);





    inline void SetMainMenuFn(MainFn cb) {m_MainFn = cb;}




    CIwMenu::Array m_MenuArray;
    CIwMenu* m_MenuActive;
    uint32 m_Flags;
    int32 m_ForceItemID;
    TextCallback m_TextCallback;
    uint32 m_CharW;
    uint32 m_CharH;
    uint32 m_MenuDefaultX;
    uint32 m_MenuDefaultY;
    uint32 m_MenuDefaultW;

private:
    enum CIwMenuKeyBind
    {
        MK_UP,
        MK_DOWN,
        MK_LEFT,
        MK_RIGHT,
        MK_ENTER,
        MK_SHIFT,
        MK_CONTROL,
        MK_PLUS,
        MK_MINUS,
        MK_INPUT,
        MK_FOCUS,
        COUNT_MENU_KEYS
    };
    uint32 m_KeyDef[COUNT_MENU_KEYS];
    bool m_Focus;
    bool m_Input;
    bool m_Destroy;
    bool m_Create;
    MainFn m_MainFn;
    uint32 m_LastInput;
    uint32 m_AutoRepeatTime;
};

extern CIwMenuManager* g_IwMenuManager;




inline CIwMenuManager* IwGetMenuManager() {return g_IwMenuManager;}
# 482 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
class CIwMenuItemString : public CIwMenuItem
{
public:






    CIwMenuItemString(const char* text, const char* string, uint32 flags = 0) : CIwMenuItem("", text, flags, CIwMenuItem::STRING), m_String(string) {};
    void Render(int32 x, int32 y);
    const char* m_String;
};




class CIwMenuItemEditValue : public CIwMenuItem
{
public:
    CIwMenuItemEditValue(const char* text, void* pValue, uint32 type, float delta = 1.0f, float min = 0.0f, float max = 1.0f, float def = 0.0f, CIwMenuItem::ColourID colID = CIwMenuItem::FIELD) : CIwMenuItem("", text, 0, colID)
    {
        m_Type = type;
        m_Value = pValue;
        m_Delta = delta;
        m_Default = def;
        m_Min = min;
        m_Max = max;
        if (m_Delta == 0.0f)
            m_ColourID = CIwMenuItem::FIXED;
    };
    ~CIwMenuItemEditValue() {};
    void Back() {IwGetMenuManager()->DestroyMenu();}
    void Plus();
    void Minus();
    virtual void EditMember(float delta);
    void Render(int32 x, int32 y);

    uint32 m_Type;
    void* m_Value;
    float m_Delta;
    float m_Default;
    float m_Min;
    float m_Max;
};







class CIwMenuItemEditInt8 : public CIwMenuItemEditValue
{
public:
# 546 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt8( const char* text, int8* pValue, float delta = 1.0f, float min = (float)(-0x7f - 1), float max = (float)0x7f, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT8, delta, min, max, def) {};
};




class CIwMenuItemEditUInt8 : public CIwMenuItemEditValue
{
public:
# 564 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt8( const char* text, uint8* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0xff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT8, delta, min, max, def) {};
};




class CIwMenuItemEditInt16 : public CIwMenuItemEditValue
{
public:
# 582 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt16( const char* text, int16* pValue, float delta = 1.0f, float min = (float)(-0x7fff - 1), float max = (float)0x7fff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT16, delta, min, max, def) {};
};




class CIwMenuItemEditUInt16 : public CIwMenuItemEditValue
{
public:
# 600 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt16( const char* text, uint16* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0xffff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT16, delta, min, max, def) {};
};




class CIwMenuItemEditInt32 : public CIwMenuItemEditValue
{
public:
# 618 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt32( const char* text, int32* pValue, float delta = 1.0f, float min = (float)(-0x7fffffffL - 1), float max = (float)0x7fffffffL, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT32, delta, min, max, def) {};
};




class CIwMenuItemEditUInt32 : public CIwMenuItemEditValue
{
public:
# 636 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt32( const char* text, uint32* pValue, float delta = 1.0f, float min = (float)0x0000, float max = (float)0xffff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT32, delta, min, max, def) {};
};




class CIwMenuItemEditFloat : public CIwMenuItemEditValue
{
public:
# 654 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditFloat( const char* text, float* pValue, float delta = 0.01f, float min = (float)(-0x7fffffffL - 1), float max = (float)0x7fffffffL, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_FLOAT, delta, min, max, def) {};
};




class CIwMenuItemEditBool : public CIwMenuItemEditValue
{
public:
# 672 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditBool( const char* text, bool* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0x1, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_BOOL, delta, min, max, def, CIwMenuItem::BOOL) {};
};




class CIwMenuItemDisplayValue : public CIwMenuItemEditValue
{
public:
    CIwMenuItemDisplayValue(const char* text, uint32 Value, uint32 type, CIwMenuItem::ColourID colID = CIwMenuItem::FIXED) : CIwMenuItemEditValue(text, __null, type, 0, 0, 0, 0, colID)
    {
        m_Type = type;
        m_StoreValue = Value;
        m_Value = (void*)&m_StoreValue;
    };
    ~CIwMenuItemDisplayValue() {};
    virtual void EditMember(float delta) { }
    uint32 m_StoreValue;
};







class CIwMenuItemTitle: public CIwMenuItem
{
public:




    CIwMenuItemTitle(const char* text) : CIwMenuItem("", text, CIwMenuItem::UNSELECTABLE_F, CIwMenuItem::TITLE) {}
};







class CIwMenuItemEditFlags : public CIwMenuItemEditUInt32
{
public:






    CIwMenuItemEditFlags(const char* text, uint32* pValue, uint32 mask) : CIwMenuItemEditUInt32(text, pValue)
    {
        m_Type = IW_TYPE_UINT32;
        m_Default = (float)mask;
        m_ColourID = CIwMenuItem::BOOL;
    };
    void EditMember(float delta)
    {
        *(uint32*)m_Value ^= (uint32)m_Default;
    }
    void Render(int32 x, int32 y);
};







class CIwMenuItemEditEnum : public CIwMenuItemEditUInt32
{
public:
# 754 "c:/marmalade/7.5/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditEnum(const char* text, uint32* pValue, const char** ppNames = __null, bool edit = true, uint32 min = 0, uint32 max = 0);
    void Render(int32 x, int32 y);
    const char** m_Names;
};







class CIwMenuItemDisplayInt8 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt8( const char* text, int8 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT8) {};
};




class CIwMenuItemDisplayUInt8 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt8( const char* text, uint8 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT8) {};
};




class CIwMenuItemDisplayInt16 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt16( const char* text, int16 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT16) {};
};




class CIwMenuItemDisplayUInt16 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt16( const char* text, uint16 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT16) {};
};




class CIwMenuItemDisplayInt32 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt32( const char* text, int32 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT32) {};
};




class CIwMenuItemDisplayUInt32 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt32( const char* text, uint32 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT32) {};
};




class CIwMenuItemDisplayFloat : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayFloat( const char* text, float Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_FLOAT) {};
};




class CIwMenuItemDisplayBool : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayBool( const char* text, bool Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_BOOL) {};
};
# 25 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h" 2

class CIwEvent;
class CIwManaged;
class CIwTextParserITX;
# 108 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
class CIwManaged : public CIwParseable
{
public:
    typedef CIwArray<CIwManaged*> Array;
    typedef Array::iterator ArrayIt;

    CIwManaged();
    virtual ~CIwManaged();






    virtual void Serialise();
# 134 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual void Resolve();
# 143 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual void ParseOpen(CIwTextParserITX* pParser) {};
# 154 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
# 164 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual void ParseClose(CIwTextParserITX* pParser);
# 176 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual void ParseCloseChild(CIwTextParserITX* pParser, CIwManaged* pChild);
# 187 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual bool HandleEvent(CIwEvent* pEvent) {return false;}
# 196 "c:/marmalade/7.5/modules/iwutil/h/IwManaged.h"
    virtual void SetName(const char* pName);


    virtual const char* GetClassName() const;


    inline const char* DebugGetName() const
    {

        return m_DebugName != __null ? m_DebugName->c_str() : "";




    }


    virtual void DebugRender() {};


    virtual void DebugAddMenuItems(CIwMenu* pMenu);


    void _SetNameNoHash(const char* pName);
    void _CopyNameAndHash(const CIwManaged* pObj);

    uint32 m_Hash;

    static void _EnableParsing();

    virtual void _Replace(CIwManaged* pRHS);

protected:
    void DebugSerialiseName();

private:
    CIwCopyingPtr<CIwStringL, CIwDebugAllocator<CIwStringL> > m_DebugName;

    friend class CIwMaterial;
};




class CIwMenuItemManaged : public CIwMenuItemString
{
public:
    CIwMenuItemManaged(const char* pString, CIwManaged* pObj) : CIwMenuItemString("", "")
    {
        m_Obj = pObj;
        m_Text = (pString) ? pString : pObj->GetClassName();
    };
    void Select();
    CIwManaged* m_Obj;
};

typedef void (*IwManagedConstructorCallback)(CIwManaged*);
typedef void (*IwManagedDestructorCallback)(CIwManaged*);
typedef void (*IwManagedSerialiseCallback)(CIwManaged*);
void _IwManagedSetConstructorCallback(IwManagedConstructorCallback fn);
void _IwManagedSetDestructorCallback(IwManagedDestructorCallback fn);
void _IwManagedSetSerialiseCallback(IwManagedSerialiseCallback fn);
IwManagedConstructorCallback _IwManagedGetConstructorCallback();
IwManagedDestructorCallback _IwManagedGetDestructorCallback();
IwManagedSerialiseCallback _IwManagedGetSerialiseCallback();
# 21 "c:/marmalade/7.5/examples/gametutorial/cpp/modules/soundengine/h/IwSoundParams.h" 2
# 1 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 1
       
# 18 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwDebug.h" 1
# 19 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwDivide.h" 1
# 78 "c:/marmalade/7.5/modules/iwutil/h/IwDivide.h"
static inline uint64 i3d_uldiv_split(uint32 toplo, uint32 tophi, uint32 bottom)
{
    unsigned accumhi = 0;
    unsigned accumlo = 0;


    int i=31;




    if(tophi & 0xffff0000)
        i -= 16;
    if(tophi==0)
        i=0;

    for (; i>=0; i--)
    {
        accumhi = accumhi << 1;

        if ((tophi>>(i)) >= (bottom))
        {
            accumhi++;


            tophi = tophi - (bottom<<i);
        }
    }
# 125 "c:/marmalade/7.5/modules/iwutil/h/IwDivide.h"
    if (tophi==0) goto fast_bit32;

    accumlo = accumlo << 1; if ((toplo>>31)+(tophi<<(32-31)) >= (bottom) || (tophi>>31)!=0) { accumlo++; if ((bottom<<31) > toplo) tophi--; toplo = toplo - (bottom<<31); tophi = tophi - (bottom>>(32-31)); if (!tophi) goto fast_bit31; }
    accumlo = accumlo << 1; if ((toplo>>30)+(tophi<<(32-30)) >= (bottom) || (tophi>>30)!=0) { accumlo++; if ((bottom<<30) > toplo) tophi--; toplo = toplo - (bottom<<30); tophi = tophi - (bottom>>(32-30)); if (!tophi) goto fast_bit30; }
    accumlo = accumlo << 1; if ((toplo>>29)+(tophi<<(32-29)) >= (bottom) || (tophi>>29)!=0) { accumlo++; if ((bottom<<29) > toplo) tophi--; toplo = toplo - (bottom<<29); tophi = tophi - (bottom>>(32-29)); if (!tophi) goto fast_bit29; }
    accumlo = accumlo << 1; if ((toplo>>28)+(tophi<<(32-28)) >= (bottom) || (tophi>>28)!=0) { accumlo++; if ((bottom<<28) > toplo) tophi--; toplo = toplo - (bottom<<28); tophi = tophi - (bottom>>(32-28)); if (!tophi) goto fast_bit28; }
    accumlo = accumlo << 1; if ((toplo>>27)+(tophi<<(32-27)) >= (bottom) || (tophi>>27)!=0) { accumlo++; if ((bottom<<27) > toplo) tophi--; toplo = toplo - (bottom<<27); tophi = tophi - (bottom>>(32-27)); if (!tophi) goto fast_bit27; }
    accumlo = accumlo << 1; if ((toplo>>26)+(tophi<<(32-26)) >= (bottom) || (tophi>>26)!=0) { accumlo++; if ((bottom<<26) > toplo) tophi--; toplo = toplo - (bottom<<26); tophi = tophi - (bottom>>(32-26)); if (!tophi) goto fast_bit26; }
    accumlo = accumlo << 1; if ((toplo>>25)+(tophi<<(32-25)) >= (bottom) || (tophi>>25)!=0) { accumlo++; if ((bottom<<25) > toplo) tophi--; toplo = toplo - (bottom<<25); tophi = tophi - (bottom>>(32-25)); if (!tophi) goto fast_bit25; }
    accumlo = accumlo << 1; if ((toplo>>24)+(tophi<<(32-24)) >= (bottom) || (tophi>>24)!=0) { accumlo++; if ((bottom<<24) > toplo) tophi--; toplo = toplo - (bottom<<24); tophi = tophi - (bottom>>(32-24)); if (!tophi) goto fast_bit24; }
    accumlo = accumlo << 1; if ((toplo>>23)+(tophi<<(32-23)) >= (bottom) || (tophi>>23)!=0) { accumlo++; if ((bottom<<23) > toplo) tophi--; toplo = toplo - (bottom<<23); tophi = tophi - (bottom>>(32-23)); if (!tophi) goto fast_bit23; }
    accumlo = accumlo << 1; if ((toplo>>22)+(tophi<<(32-22)) >= (bottom) || (tophi>>22)!=0) { accumlo++; if ((bottom<<22) > toplo) tophi--; toplo = toplo - (bottom<<22); tophi = tophi - (bottom>>(32-22)); if (!tophi) goto fast_bit22; }
    accumlo = accumlo << 1; if ((toplo>>21)+(tophi<<(32-21)) >= (bottom) || (tophi>>21)!=0) { accumlo++; if ((bottom<<21) > toplo) tophi--; toplo = toplo - (bottom<<21); tophi = tophi - (bottom>>(32-21)); if (!tophi) goto fast_bit21; }
    accumlo = accumlo << 1; if ((toplo>>20)+(tophi<<(32-20)) >= (bottom) || (tophi>>20)!=0) { accumlo++; if ((bottom<<20) > toplo) tophi--; toplo = toplo - (bottom<<20); tophi = tophi - (bottom>>(32-20)); if (!tophi) goto fast_bit20; }
    accumlo = accumlo << 1; if ((toplo>>19)+(tophi<<(32-19)) >= (bottom) || (tophi>>19)!=0) { accumlo++; if ((bottom<<19) > toplo) tophi--; toplo = toplo - (bottom<<19); tophi = tophi - (bottom>>(32-19)); if (!tophi) goto fast_bit19; }
    accumlo = accumlo << 1; if ((toplo>>18)+(tophi<<(32-18)) >= (bottom) || (tophi>>18)!=0) { accumlo++; if ((bottom<<18) > toplo) tophi--; toplo = toplo - (bottom<<18); tophi = tophi - (bottom>>(32-18)); if (!tophi) goto fast_bit18; }
    accumlo = accumlo << 1; if ((toplo>>17)+(tophi<<(32-17)) >= (bottom) || (tophi>>17)!=0) { accumlo++; if ((bottom<<17) > toplo) tophi--; toplo = toplo - (bottom<<17); tophi = tophi - (bottom>>(32-17)); if (!tophi) goto fast_bit17; }
    accumlo = accumlo << 1; if ((toplo>>16)+(tophi<<(32-16)) >= (bottom) || (tophi>>16)!=0) { accumlo++; if ((bottom<<16) > toplo) tophi--; toplo = toplo - (bottom<<16); tophi = tophi - (bottom>>(32-16)); if (!tophi) goto fast_bit16; }
    accumlo = accumlo << 1; if ((toplo>>15)+(tophi<<(32-15)) >= (bottom) || (tophi>>15)!=0) { accumlo++; if ((bottom<<15) > toplo) tophi--; toplo = toplo - (bottom<<15); tophi = tophi - (bottom>>(32-15)); if (!tophi) goto fast_bit15; }
    accumlo = accumlo << 1; if ((toplo>>14)+(tophi<<(32-14)) >= (bottom) || (tophi>>14)!=0) { accumlo++; if ((bottom<<14) > toplo) tophi--; toplo = toplo - (bottom<<14); tophi = tophi - (bottom>>(32-14)); if (!tophi) goto fast_bit14; }
    accumlo = accumlo << 1; if ((toplo>>13)+(tophi<<(32-13)) >= (bottom) || (tophi>>13)!=0) { accumlo++; if ((bottom<<13) > toplo) tophi--; toplo = toplo - (bottom<<13); tophi = tophi - (bottom>>(32-13)); if (!tophi) goto fast_bit13; }
    accumlo = accumlo << 1; if ((toplo>>12)+(tophi<<(32-12)) >= (bottom) || (tophi>>12)!=0) { accumlo++; if ((bottom<<12) > toplo) tophi--; toplo = toplo - (bottom<<12); tophi = tophi - (bottom>>(32-12)); if (!tophi) goto fast_bit12; }
    accumlo = accumlo << 1; if ((toplo>>11)+(tophi<<(32-11)) >= (bottom) || (tophi>>11)!=0) { accumlo++; if ((bottom<<11) > toplo) tophi--; toplo = toplo - (bottom<<11); tophi = tophi - (bottom>>(32-11)); if (!tophi) goto fast_bit11; }
    accumlo = accumlo << 1; if ((toplo>>10)+(tophi<<(32-10)) >= (bottom) || (tophi>>10)!=0) { accumlo++; if ((bottom<<10) > toplo) tophi--; toplo = toplo - (bottom<<10); tophi = tophi - (bottom>>(32-10)); if (!tophi) goto fast_bit10; }
    accumlo = accumlo << 1; if ((toplo>>9)+(tophi<<(32-9)) >= (bottom) || (tophi>>9)!=0) { accumlo++; if ((bottom<<9) > toplo) tophi--; toplo = toplo - (bottom<<9); tophi = tophi - (bottom>>(32-9)); if (!tophi) goto fast_bit9; }
    accumlo = accumlo << 1; if ((toplo>>8)+(tophi<<(32-8)) >= (bottom) || (tophi>>8)!=0) { accumlo++; if ((bottom<<8) > toplo) tophi--; toplo = toplo - (bottom<<8); tophi = tophi - (bottom>>(32-8)); if (!tophi) goto fast_bit8; }
    accumlo = accumlo << 1; if ((toplo>>7)+(tophi<<(32-7)) >= (bottom) || (tophi>>7)!=0) { accumlo++; if ((bottom<<7) > toplo) tophi--; toplo = toplo - (bottom<<7); tophi = tophi - (bottom>>(32-7)); if (!tophi) goto fast_bit7; }
    accumlo = accumlo << 1; if ((toplo>>6)+(tophi<<(32-6)) >= (bottom) || (tophi>>6)!=0) { accumlo++; if ((bottom<<6) > toplo) tophi--; toplo = toplo - (bottom<<6); tophi = tophi - (bottom>>(32-6)); if (!tophi) goto fast_bit6; }
    accumlo = accumlo << 1; if ((toplo>>5)+(tophi<<(32-5)) >= (bottom) || (tophi>>5)!=0) { accumlo++; if ((bottom<<5) > toplo) tophi--; toplo = toplo - (bottom<<5); tophi = tophi - (bottom>>(32-5)); if (!tophi) goto fast_bit5; }
    accumlo = accumlo << 1; if ((toplo>>4)+(tophi<<(32-4)) >= (bottom) || (tophi>>4)!=0) { accumlo++; if ((bottom<<4) > toplo) tophi--; toplo = toplo - (bottom<<4); tophi = tophi - (bottom>>(32-4)); if (!tophi) goto fast_bit4; }
    accumlo = accumlo << 1; if ((toplo>>3)+(tophi<<(32-3)) >= (bottom) || (tophi>>3)!=0) { accumlo++; if ((bottom<<3) > toplo) tophi--; toplo = toplo - (bottom<<3); tophi = tophi - (bottom>>(32-3)); if (!tophi) goto fast_bit3; }
    accumlo = accumlo << 1; if ((toplo>>2)+(tophi<<(32-2)) >= (bottom) || (tophi>>2)!=0) { accumlo++; if ((bottom<<2) > toplo) tophi--; toplo = toplo - (bottom<<2); tophi = tophi - (bottom>>(32-2)); if (!tophi) goto fast_bit2; }
    accumlo = accumlo << 1; if ((toplo>>1)+(tophi<<(32-1)) >= (bottom) || (tophi>>1)!=0) { accumlo++; if ((bottom<<1) > toplo) tophi--; toplo = toplo - (bottom<<1); tophi = tophi - (bottom>>(32-1)); if (!tophi) goto fast_bit1; }
    accumlo = accumlo << 1; if ((toplo>>0) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<0); }

    return (uint64)accumlo | ((uint64)accumhi)<<32;

fast_bit32:
    accumlo = accumlo << 1; if ((toplo>>31) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<31); } fast_bit31:
    accumlo = accumlo << 1; if ((toplo>>30) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<30); } fast_bit30:
    accumlo = accumlo << 1; if ((toplo>>29) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<29); } fast_bit29:
    accumlo = accumlo << 1; if ((toplo>>28) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<28); } fast_bit28:
    accumlo = accumlo << 1; if ((toplo>>27) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<27); } fast_bit27:
    accumlo = accumlo << 1; if ((toplo>>26) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<26); } fast_bit26:
    accumlo = accumlo << 1; if ((toplo>>25) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<25); } fast_bit25:
    accumlo = accumlo << 1; if ((toplo>>24) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<24); } fast_bit24:
    accumlo = accumlo << 1; if ((toplo>>23) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<23); } fast_bit23:
    accumlo = accumlo << 1; if ((toplo>>22) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<22); } fast_bit22:
    accumlo = accumlo << 1; if ((toplo>>21) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<21); } fast_bit21:
    accumlo = accumlo << 1; if ((toplo>>20) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<20); } fast_bit20:
    accumlo = accumlo << 1; if ((toplo>>19) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<19); } fast_bit19:
    accumlo = accumlo << 1; if ((toplo>>18) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<18); } fast_bit18:
    accumlo = accumlo << 1; if ((toplo>>17) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<17); } fast_bit17:
    accumlo = accumlo << 1; if ((toplo>>16) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<16); } fast_bit16:
    accumlo = accumlo << 1; if ((toplo>>15) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<15); } fast_bit15:
    accumlo = accumlo << 1; if ((toplo>>14) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<14); } fast_bit14:
    accumlo = accumlo << 1; if ((toplo>>13) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<13); } fast_bit13:
    accumlo = accumlo << 1; if ((toplo>>12) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<12); } fast_bit12:
    accumlo = accumlo << 1; if ((toplo>>11) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<11); } fast_bit11:
    accumlo = accumlo << 1; if ((toplo>>10) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<10); } fast_bit10:
    accumlo = accumlo << 1; if ((toplo>>9) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<9); } fast_bit9:
    accumlo = accumlo << 1; if ((toplo>>8) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<8); } fast_bit8:
    accumlo = accumlo << 1; if ((toplo>>7) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<7); } fast_bit7:
    accumlo = accumlo << 1; if ((toplo>>6) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<6); } fast_bit6:
    accumlo = accumlo << 1; if ((toplo>>5) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<5); } fast_bit5:
    accumlo = accumlo << 1; if ((toplo>>4) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<4); } fast_bit4:
    accumlo = accumlo << 1; if ((toplo>>3) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<3); } fast_bit3:
    accumlo = accumlo << 1; if ((toplo>>2) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<2); } fast_bit2:
    accumlo = accumlo << 1; if ((toplo>>1) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<1); } fast_bit1:
    accumlo = accumlo << 1; if ((toplo>>0) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<0); }
# 224 "c:/marmalade/7.5/modules/iwutil/h/IwDivide.h"
    return (uint64)accumlo | ((uint64)accumhi)<<32;
}

static inline uint64 i3d_ldiv_split(uint32 toplo, int32 tophi, int32 bottom)
{
    if(tophi<0) {
        if(bottom>0)
            return -(int64)i3d_uldiv_split(toplo, -tophi, bottom);
        else
            return i3d_uldiv_split(toplo, -tophi, -bottom);
    }
    else {
        if(bottom<0)
            return i3d_uldiv_split(toplo, tophi, -bottom);
        else
            return i3d_uldiv_split(toplo, tophi, bottom);
    }
}

static inline uint64 i3d_uldiv(uint64 udividend, uint32 udivisor)
{
    return i3d_uldiv_split((uint32)(udividend&0xffffffff), (uint32)(udividend>>32), udivisor);
}





static inline int64 i3d_ldiv(int64 dividend,
                    int32 divisor)
{
    if(dividend<0) {
        if(divisor>0)
            return -(int64)i3d_uldiv(-dividend,divisor);
        else
            return i3d_uldiv(-dividend,-divisor);
    }
    else {
        if(divisor<0)
            return -(int64)i3d_uldiv(dividend,-divisor);
        else
            return i3d_uldiv(dividend,divisor);
    }
}
# 293 "c:/marmalade/7.5/modules/iwutil/h/IwDivide.h"
static inline int32 i3d_lmod(int64 dividend, int32 divisor)
{
        return (int32)(dividend - (((int64)(((int64)(dividend))/((int32)(divisor)))) * divisor));
}
# 20 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/7.5/modules/iwutil/h/IwMath.h" 1
# 21 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 2
# 49 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
void IwGeomInit();






void IwGeomTerminate();
# 161 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
typedef int32 iwfixed;




typedef uint32 iwufixed;




typedef int16 iwsfixed;




typedef uint16 iwusfixed;




typedef int32 iwqfixed;
# 191 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
typedef int32 iwangle;




typedef int32 iwqangle;
# 227 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_FROM_FIXED(iwfixed a)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(a >> 31 == a >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(349); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("a >> 31 == a >> 15", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 229, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwsfixed)a;
}
# 271 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_FROM_FLOAT(float a)
{

    int64 fix64 = (int64)(a * (float)(1 << 12));
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 275, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwfixed)(a * (float)(1 << 12));
}
# 290 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_FROM_FLOAT_CAST(float a)
{

    int64 fix64 = (int64)a;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 15", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 294, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwsfixed)a;
}

static inline iwfixed IW_FIXED_FROM_FLOAT_CAST(float a)
{

    int64 fix64 = (int64)a;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 303, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwfixed)a;
}
# 365 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwangle IW_ANGLE_DIFFERENCE(iwangle x, iwangle y)
{
    iwangle z = ((iwangle)((x - y) & (((iwangle)(1 << 12)) - 1)));

    if (z <= ((iwangle)(1 << (12 - 1))))
        return z;
    else
        return z - ((iwangle)(1 << 12));
}
# 387 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL(iwfixed a, iwfixed b)
{

    int64 test = (int64)a * b;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(350); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 391, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (a * b) >> 12;
}
# 405 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL_SAFE(iwfixed a, iwfixed b)
{
    int64 res = (((int64)a * b) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(351); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 408, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 422 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_MUL(iwfixed a, iwfixed b)
{
    return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(a, b));
}
# 436 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwqfixed IW_QFIXED_MUL(iwqfixed a, iwqfixed b)
{

    int64 test = (int64)a * b;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(352); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 440, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (a * b) >> 30;
}
# 454 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwqfixed IW_QFIXED_MUL_SAFE(iwqfixed a, iwqfixed b)
{
    int64 res = (((int64)a * b) >> 30);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(353); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 457, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 470 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL3(iwfixed a, iwfixed b, iwfixed c, iwfixed d, iwfixed e, iwfixed f)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(357); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 474, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(358); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 476, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test3 = (int64)c * f;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test3 >> 63 == test3 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(359); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test3 >> 63 == test3 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 478, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(360); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 480, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test3;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(361); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 482, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> 12);



}
# 499 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL3_SAFE(iwfixed a, iwfixed b, iwfixed c, iwfixed d, iwfixed e, iwfixed f)
{
    int64 res = ((((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(354); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 502, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 516 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL2(iwfixed a, iwfixed b, iwfixed d, iwfixed e)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(357); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 520, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(358); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 522, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(360); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 524, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> 12);



}
# 542 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL2_SAFE(iwfixed a, iwfixed b, iwfixed d, iwfixed e)
{
    int64 res = ((((int64)a * d) + ((int64)b * e)) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(354); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 545, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 562 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_DIV(iwfixed a, iwfixed b)
{
    if (!(b & ((1 << 12) - 1)))
    {
        return (iwfixed)(((int32)(a))/((int32)(b >> 12)));
    }
    else
    {

        int64 test = ((int64)a << 12);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(355); IwDebugAssertSetMessage ("Divide overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 572, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (iwfixed)(((int32)(a << 12))/((int32)(b)));
    }
}
# 593 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_DIV_SAFE(iwfixed a, iwfixed b)
{
    if ((a>>19) == (a>>31) || !(b & ((1 << 12) - 1))) return IW_FIXED_DIV(a, b);
    int64 result = ((int64)a << 12);
    result = ((int64)(((int64)(result))/((int32)(b))));
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(result >> 63 == result >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(356); IwDebugAssertSetMessage ("Divide overflow"); switch (IwDebugAssertShow("result >> 63 == result >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 598, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)result;
}


extern "C" {
# 613 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
iwfixed IwGeomSin(iwangle x);






iwfixed IwGeomCos(iwangle x);






iwqfixed IwGeomQSin(iwqangle x);






iwqfixed IwGeomQCos(iwqangle x);






iwfixed IwGeomTan(iwangle x);






iwfixed IwGeomACos(iwfixed v);






iwqfixed IwGeomQACos(iwqfixed v);






iwfixed IwGeomASin(iwfixed v);






iwqfixed IwGeomQASin(iwqfixed v);






iwqfixed IwGeomQATan2(iwqfixed u, iwqfixed v);
# 687 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
iwangle IwGeomAtan2(int y, int x);
# 703 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
extern double cos(double);
extern double acos(double);
extern double sin(double);
extern double asin(double);
extern double sqrt(double);
extern double tan(double);
extern double atan2(double,double);
# 720 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
}
# 731 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MULCHECK(const int32 a, const int32 b)
{

        int64 test = (int64)a*b;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(362); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 737, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return a*b;
}
# 752 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL64_SHIFT(int32 a, int32 b, int32 shift)
{

        int64 test = ((int64)a*b) >> shift;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(336); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 758, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return (int32)(((int64)a * b) >> shift);
}
# 774 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL64_3_SHIFT(int32 a, int32 b, int32 c, int32 d, int32 e, int32 f, int32 shift)
{

        int64 test = (((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> shift;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(338); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 780, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return (int32) ((((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> shift);
}
# 795 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL_3_SHIFT(int32 a, int32 b, int32 c, int32 d, int32 e, int32 f, int32 shift)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1796); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 799, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1797); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 801, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test3 = (int64)c * f;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test3 >> 63 == test3 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1798); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test3 >> 63 == test3 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 803, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1799); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 805, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test3;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1800); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 807, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> shift);



}
# 825 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL_2_SHIFT(int32 a, int32 b, int32 d, int32 e, int32 shift)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1796); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 829, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1797); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 831, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1799); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h", 833, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do { if (s3eDebugIsDebuggerPresent()) __asm__ (" int $3 "); } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> shift);



}




# 1 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomLegacy.h" 1
       
# 844 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h" 1
       
# 38 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
iwfixed IW_GEOM_SQRT(iwfixed a);






iwqfixed IW_GEOM_QSQRT(iwqfixed a);
# 54 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
int32 IW_GEOM_SQRT2(int32 a);
# 79 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
extern iwfixed g_SqrtTable [];


void IwSqrtInit();
# 93 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_SQRT_FAST(iwfixed x){
    uint32 m = clz(x);

    if (m <= (32 - 12 + 1)) {
        m = ((32 - 12 + 1) - m + 1) & (~1);




        int32 totalshift = (0>>1) + 12 - (m>>1);

        if (((x<<1)>>m)&1){
            if (totalshift > 0)
                return g_SqrtTable[(x>>m)+1]>>totalshift;
            else
                return g_SqrtTable[(x>>m)+1]<<(-totalshift);
        } else {
            if (totalshift > 0)
                return g_SqrtTable[x>>m]>>totalshift;
            else
                return g_SqrtTable[x>>m]<<(-totalshift);
        }
    } else {
        m = (m - (32 - 12 + 1) - 1) & (~1);




        return g_SqrtTable[x<<m]>>((0 + m)>>1)>>12;
    }
}
# 133 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_SQRT2_FAST(iwfixed x){
    uint32 m = clz(x);

    if (m <= (32 - 12 + 1)) {
        m = ((32 - 12 + 1) - m + 1) & (~1);




        int32 totalshift = (0>>1) + (12>>1) - (m>>1);

        if (((x<<1)>>m)&1){
            if (totalshift > 0)
                return g_SqrtTable[(x>>m)+1]>>totalshift;
            else
                return g_SqrtTable[(x>>m)+1]<<(-totalshift);
        } else {
            if (totalshift > 0)
                return g_SqrtTable[x>>m]>>totalshift;
            else
                return g_SqrtTable[x>>m]<<(-totalshift);
        }
    } else {
        m = (m - (32 - 12 + 1) - 1) & (~1);




        return g_SqrtTable[x<<m]>>((0 + m + 12)>>1);
    }
}
# 190 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
void IwInverseSqrtInit();






extern iwfixed g_InverseSqrtTable[];
# 209 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_INVERSE_SQRT(iwfixed x)
{
    uint32 m = clz(x);







    if (m <= (32 - 12 + 1)){
        m = ((32 - 12 + 1) - m + 1)>>1;





        return (g_InverseSqrtTable[x>>(m<<1)]<<(6>>1))>>m;
    } else {
        m = (m - (32 - 12 + 1))>>1;





        return g_InverseSqrtTable[x<<(m<<1)]<<((6>>1) - m);
    }
}
# 250 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_INVERSE_SQRT2(iwfixed x){
    uint32 m = clz(x);







    if (m <= (32 - 12 + 1)){
        m = ((32 - 12 + 1) - m + 1)>>1;





        return (g_InverseSqrtTable[x>>(m<<1)]<<((6 + 12)>>1))>>m;
    } else {
        m = (m - (32 - 12 + 1))>>1;





        return g_InverseSqrtTable[x<<(m<<1)]<<(((6 + 12)>>1) - m);
    }
}
# 845 "c:/marmalade/7.5/modules/iwgeom/h/IwGeomCore.h" 2
# 22 "c:/marmalade/7.5/examples/gametutorial/cpp/modules/soundengine/h/IwSoundParams.h" 2







class CIwSoundParams
{
public:
    CIwSoundParams();


    iwsfixed m_Vol;
    iwsfixed m_Pan;
    iwsfixed m_Pitch;
    uint16 m_Pad;
};
# 17 "c:/Marmalade/7.5/examples/GameTutorial/CPP/modules/soundengine/source/IwSoundParams.cpp" 2






CIwSoundParams::CIwSoundParams()
{
    CIwCallStack _callstack("CIwSoundParams::CIwSoundParams"); {}

    m_Vol = (1 << 12);
    m_Pan = 0;
    m_Pitch = (1 << 12);
}
